#!/usr/bin/env php
<?php
/**
 * The zentao auto testing tools.
 *
 * ZenTaoTest is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * ZenTaoTest is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZenTaoTest.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright   Copyright 2009, Chunsheng Wang
 * @author      Chunsheng Wang <wwccss@gmail.com>
 * @package     ZenTaoTest
 * @version     $Id$
 * @link        http://www.zentao.cn
 */
error_reporting(0);

$zt = new zentaotest();
$zt->execute();

/* 测试类定义。*/
class zentaotest
{
    private $cwd     = '';          // 当前工作目录。
    private $logFile = '';          // 结果文件。
    private $logInfo = '';          // 结果信息。
    private $scripts = array();     // 需要运行的脚本。
    private $scriptMaxLength = 0;   // 脚本文件名的最大长度。

    /* 构造函数。*/
    public function __construct()
    {
        $this->setcwd();
        $this->setLogFile();
        $this->findScripts();
        $this->getScriptFileMaxLength();
    }

    /* 运行自动化测试框架。*/
    public function execute()
    {
        $this->runScripts();
        $this->saveReport();
    }

    /* 设置当前工作目录。*/
    private function setcwd()
    {
        $this->cwd = getcwd() . DIRECTORY_SEPARATOR;
    }

    /* 设置结果文件。*/
    private function setLogFile()
    {
        $this->logFile = '/tmp/zt_' . date('Ymd_Hi') . '.log';
    }

    /* 批量运行测试脚本。*/
    private function runScripts()
    {
        $total = count($this->scripts);
        $digits = strlen($total);
        foreach($this->scripts as $key => $script)
        {
            echo '(' . str_pad($key + 1, $digits, ' ', STR_PAD_LEFT)  . '/' . $total . ") ";
            $this->runScript($script);
        }
    }

    /* 运行单个测试脚本。*/
    private function runScript($script)
    {
        extract($this->extractSection($script));
        
        /* 运行当前脚本，获得输出内容。*/
        chdir(dirname($script));
        $out = trim(`$script`);

        /* 比较输出和预期的结果。*/
        if(strcmp($compare, $out) !== 0)
        {
            $this->logInfo .= "$title\t $script\n";
            $this->logInfo .= $this->diff($compare, $out) . "\n";
            $result = "FAIL";
        }
        else
        {
            $result = "PASS";
        }
        $script = str_replace($this->cwd, '', $script);
        echo $result . "  " . $title . "  " . "[$script]\n";
        chdir($this->cwd);
    }

    /* 取得comment部分的内容。*/
    private function extractSection($script)
    {
        $script = realpath($script);
        $lines  = trim(file_get_contents($script));

        /* 取得comment部分的内容。*/
        $commentStart = strpos($lines, '/**');
        $commentEnd   = strpos($lines, '*/', $commentStart);
        $comment      = trim(substr($lines, $commentStart + 3, $commentEnd - $commentStart - 3));
        $comment      = str_replace('*', '', $comment);
        $comment      = explode("\n", $comment);
        $title        = trim($comment[0]);

        /* 取得比较部分的内容。*/
        chdir(dirname($script));
        $compare = '';
        $compareStart = strpos($lines, '<<<', $commentEnd);
        if($compareStart !== false)
        {
            $nextLinePos  = strpos($lines, "\n", $compareStart);
            $compareType  = trim(substr($lines, $compareStart + 3, $nextLinePos - $compareStart - 3));
            $compareEnd   = strrpos($lines, $compareType, $nextLinePos);
            $compare      = trim(substr($lines, $nextLinePos + 1, $compareEnd - $nextLinePos - 1));

            /* 如果compare部分为文件，取文件的内容。*/
            if(is_file($compare)) $compare = trim(file_get_contents($compare));
        }
        else
        {
            $compareFile = '.' . basename($script, '.php') . '.expect';
            if(file_exists($compareFile)) $compare = trim(file_get_contents($compareFile));
        }
        chdir($this->cwd);

        return array('title' => $title, 'compare' => $compare);
    }

    /* 保存结果文件。*/
    private function saveReport()
    {
        /* 保存最终的结果。*/
        file_put_contents($this->logFile, $this->logInfo);
        echo "The log file is $this->logFile\n";
    }

    /* 递归扫描某一个目录下面所有的测试脚本。*/
    private function findScripts($dir = '.')
    {
        $scripts = glob($dir . '/' . '*');
        foreach($scripts as $script)
        {
            if(is_dir($script))
            {
                $this->findScripts($script);
            }
            else
            {
                if(strpos($script, '.php'))
                {
                    $compareFile = str_replace(basename($script), '.' . str_replace('.php', '.expect', basename($script)), $script);
                    if(file_exists($compareFile) or strpos(file_get_contents($script), '<<<expect'))
                    {
                        $this->scripts[] = realpath($script);
                    }    
                }    
            }
        }
    }

    /* 获得脚本文件名的最大长度。*/
    private function getScriptFileMaxLength()
    {
        foreach($this->scripts as $script)
        {
            $script = str_replace($this->cwd, '', $script);
            $length = strlen($script);
            if($length > $this->scriptMaxLength) $this->scriptMaxLength = $length; 
        }
    }

    /* 比较两个字符串的区别，代码摘自php的自动化测试框架。*/
    private function diff($wanted, $out)
    {
        $w  = explode("\n", $wanted);
        $o  = explode("\n", $out);
        $w1 = array_diff_assoc($w,$o);
        $o1 = array_diff_assoc($o,$w);
        $w2 = array();
        $o2 = array();
        foreach($w1 as $idx => $val) $w2[sprintf("%03d<",$idx)] = sprintf("%03d- ", $idx+1).$val;
        foreach($o1 as $idx => $val) $o2[sprintf("%03d>",$idx)] = sprintf("%03d+ ", $idx+1).$val;
        $diff = array_merge($w2, $o2);
        ksort($diff);
        return implode("\n", $diff);
    }

    /* 打印错误信息，并退出。*/
    private function error($message)
    {
        die("ERROR: " . $message . "\n");
    }
}
?>
