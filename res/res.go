// Code generated by go-bindata.
// sources:
// res/messages_en.json
// res/messages_zh.json
// res/res.go
// res/doc/sample.txt
// res/doc/usage.txt
// res/json/case-from-prodoct.json
// res/json/success.json
// res/json/zentao-settings.json
// res/template/bat.tpl
// res/template/go.tpl
// res/template/lua.tpl
// res/template/perl.tpl
// res/template/php.tpl
// res/template/python.tpl
// res/template/readme-en.tpl
// res/template/readme-zh.tpl
// res/template/ruby.tpl
// res/template/shell.tpl
// res/template/tcl.tpl
// DO NOT EDIT!

package res

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resMessages_enJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x5d\x6f\x1b\xb7\x12\x7d\xf7\xaf\x18\x18\x10\x7c\x2f\xae\xaf\x83\x7e\x3c\xe9\x25\x4d\x1d\x17\x09\x90\x26\x81\xe5\x36\x48\xe3\x80\xa0\x76\x47\x5a\xc2\x2b\x72\xcb\x0f\xdb\x4a\x90\xff\x5e\x0c\xb9\x92\x56\xb2\x38\xdc\xf4\x25\x88\x35\x87\x67\x86\xe4\xf0\xf0\x70\xbf\x9e\x00\x9c\xb6\x52\x2f\x83\x5c\xe2\xe9\x14\x4e\x51\xff\xff\x8f\xd9\xe9\x39\xfd\xbc\x42\xe7\xe4\x12\xdd\xe9\x14\x3e\x9d\x00\x00\x7c\x8d\xff\x02\x9c\xaa\x9a\xa0\xde\x78\xd9\x46\x68\xfc\xd1\x5b\xa9\x5d\x2b\xbd\x32\x9a\xa2\x37\x31\x1a\x83\xdf\xce\x8f\x0d\xef\xa4\x73\xd9\xd1\xef\x29\xc8\x0c\x5e\x48\x95\x4f\xfd\x1b\x05\x99\xc1\xee\x4e\x75\xd9\xc1\x33\x0a\x6e\x06\x1f\xad\xdb\x9a\x3a\x54\x5e\xa8\x3a\x5f\x7d\x82\xc0\xeb\x9a\x2b\x63\x65\xea\xd0\x22\xc7\xf3\x7b\x44\x14\x68\x5c\x50\x9e\x65\x99\x11\xa0\x40\xe2\xa5\xbb\xe3\x38\x6e\xa4\xbb\x1b\x52\x1c\xe5\x40\xe7\x45\x25\x1d\x66\x59\x08\x01\x11\xc1\x95\x42\x34\x71\x52\xf9\x6a\x88\x27\x4e\xab\x4c\x54\x59\xd5\xf9\x02\x53\xc2\x30\x54\x16\x5d\x68\xf3\x2c\x7d\x98\xdb\x24\x8f\x4c\xcb\x51\xb0\x30\x38\x7f\x54\x66\x31\xca\x0c\xaf\x1a\xac\xee\x3a\xa3\x74\x7e\x02\x97\x3b\x08\x43\x84\x8f\x1d\x56\x5e\x14\x16\xe3\x2a\xa2\xe0\xba\xb8\x26\xb2\xf2\x41\xb6\x25\xba\x17\x11\x35\x82\xae\x32\xda\xe3\x70\x8e\xbd\x7e\xc5\xf9\x1d\xc6\x0e\xe7\xdf\xc7\x8b\xa7\xb5\x70\x54\xd9\xfa\xa4\xc7\xa5\xb1\xeb\x7c\x11\x1b\x00\x43\x72\x8f\xd6\x11\x3c\xc7\xf1\x67\x1f\xe7\xba\x09\xef\xd1\x2a\x9f\xaf\x63\xb6\x01\x70\xe2\x6d\x95\x61\x49\xde\x6f\x00\xdc\x01\x55\xbe\x45\x51\x49\xad\x8d\x17\x73\x14\xb8\xea\x86\x8c\x83\xfd\xbb\x21\x24\x24\x24\xcc\x11\x0e\x90\x87\x87\xfa\x28\x9a\x93\x2e\x8d\x58\x8b\xca\xe8\x85\x5a\x66\x59\x3f\x9a\x00\x84\x03\x6f\x20\x41\xe1\x2f\xd4\x5e\x1a\x70\xa4\xaf\x73\x5c\x18\x8b\x10\x0f\x9b\x09\xfe\x1c\xfc\xba\x43\x38\xc3\x47\xe5\xcf\x68\xc8\xdf\x41\xf9\x0b\x6e\x35\xe6\xb8\x54\xba\x54\xc4\xaf\x04\xda\x55\x50\xc8\x72\x2c\xcd\x83\xd4\x5e\x78\x43\x89\xbc\xd2\x21\xdf\xd1\x2f\x0d\xac\x4d\x00\xc2\xf7\x09\x23\xfe\xd3\xc7\x67\xfa\xf3\x73\xbe\xd1\x1d\x8a\xd0\xd5\xd2\x63\x9a\x8e\x5d\x65\x93\x7c\x50\x6d\x0b\x95\x59\xad\x54\xba\x18\x40\xe9\x85\xa1\x74\xfd\xd2\x4a\x07\x73\x6c\xcd\xc3\xf4\x56\x43\xdc\xd6\x29\x4c\x58\xb1\x43\xed\xd1\x8a\x5a\xd9\xbc\x3e\x11\x02\x26\x0e\x6a\x65\xd9\x0d\xa9\x95\x15\xd4\x99\xf8\xa8\x5c\x5e\x3a\x5e\x2a\x0b\xd4\x67\x09\x55\xac\x6c\xeb\xb5\xf8\xf2\x7c\x83\xb0\x81\xee\x6d\x43\x70\x38\xbd\xd5\x3f\x5c\xc0\x95\x5e\xb6\xca\x35\x30\x71\xb7\xfa\xc7\x0b\xb8\x6c\x94\x46\x87\x85\xd5\x49\x5d\x23\xbe\xc4\xc5\x15\x8e\xbb\x63\x9f\x6e\xff\x41\xc7\x97\x1b\x21\xcd\x38\xd8\xbc\x53\x1b\x1e\xa0\x60\xdb\x71\x9b\x2b\xab\xca\x04\x46\xcc\x87\xa4\x3d\x76\x1c\x31\x39\xd2\x07\x63\xf3\x2e\xe8\x45\x62\x83\x0d\x70\x1c\x6d\x65\x04\x9d\xd2\x2c\xeb\xeb\x55\x67\xac\x87\xad\x39\x72\xb0\xb0\x66\xf5\x3c\xee\xf2\xc6\x49\xf6\xbb\xdc\x1b\x42\xfa\xeb\xa7\x8b\xe4\x80\xe2\x1f\x3f\x5f\x40\x74\x68\x23\xcb\x51\xba\xc6\x0e\x75\xcd\x5d\x89\x33\x79\x8f\x90\x6e\x7c\x48\x57\xb4\x03\xa5\x61\x30\x14\x16\xaa\xc5\x4f\xeb\x67\x6f\xc7\x74\x41\x65\xca\xad\x3f\xc3\x96\xb2\x25\xcb\xb6\x6d\xff\xe9\xad\x1e\x35\x2d\x52\x1d\x55\x8b\x85\xb1\xc2\x22\xad\xa8\x98\x87\xbc\x90\x7e\x68\x54\xd5\x24\xc9\xa9\xf7\x3b\x3d\x0d\x86\x79\x58\xc2\xc2\xd8\xe7\x70\xf3\x9d\x3a\xde\x4b\x9e\x48\xaa\x56\xb2\x37\x97\xbd\xac\xa6\x33\x16\x75\x30\x8d\xd8\x4a\x5f\x3a\x67\x7b\x8b\x70\x2c\xad\xd2\xf7\xb2\x55\xb5\x50\xba\x0b\xf9\x74\xaf\x13\x0a\x22\xea\x1c\xba\x16\x69\x05\xbc\x5d\x83\x5c\x4a\xa5\xd9\x89\xf5\xaa\xd1\x6b\x88\x0b\x55\x85\xcc\x0b\x6e\x96\xe2\x4f\xb5\xa3\x32\x5a\x63\x45\xb0\xef\xc8\x56\x7c\xef\x8d\xcb\x73\x74\xbf\x82\xb5\xa8\x7d\xe9\xe6\xbd\x4c\xb0\x3e\xc9\x94\xa5\x44\x7d\xd4\xc5\xf4\x92\xcd\x48\x7f\x8a\x73\xab\xd2\x1c\xf7\xb7\x49\xfd\x19\x7f\x9f\xe2\x9c\x2d\x0c\x5d\x3c\x34\xc5\x53\xfa\x4e\xb7\x6b\x40\xfd\x9f\x89\xfb\x2f\x48\x5d\xc3\x97\x26\xfe\x77\x7b\x5b\x29\x47\xaa\x8b\x9d\x97\xf3\x16\xd9\x2d\xd6\x26\x9e\xda\x7c\x0f\xbd\x35\x7b\xaa\x68\x82\xae\xf9\xbd\xd4\xa6\x7f\xf0\x95\x39\x7b\xdc\x21\xeb\xd1\x95\x89\x9d\x4c\xa6\xa9\x35\x4b\x95\x37\xdf\x83\x96\x8f\x40\x96\x95\x3a\xba\x4c\xb9\x69\xed\x03\xbe\xa3\x65\x7a\x69\xc9\xac\x60\x15\x3c\xf7\x44\x98\x11\x0e\xae\xb6\x38\x56\x59\xeb\x11\x84\x57\xba\x1e\x47\x97\x2a\x64\xbf\x10\xa4\xe2\x2e\x65\x74\x32\x20\x7d\xf1\x46\xab\x79\x3e\xaa\x6d\x8f\xed\x1c\x1c\x5d\x5f\x30\xa9\xc1\x61\xc5\x92\xdb\xa0\x8b\xdd\x74\x1d\xf4\xb6\x93\x94\x86\x85\x69\x6b\xb4\x70\x36\x71\x67\x60\x34\x25\x7d\x37\x63\xbb\xc0\xab\x15\x0a\xba\xee\x85\x37\xf9\x26\xb0\x66\x45\x5c\xde\x3c\x9d\x40\xf1\x3c\xec\x5e\xff\xec\x99\x18\xc0\x78\x4a\xa3\xdb\xb5\xd8\x88\x45\x9a\xfa\x48\xcd\xe8\x07\xed\x94\x62\xe2\xf8\xb5\x31\x5e\xb6\xa2\xfc\x55\x29\x7e\x69\x6c\xd7\xb4\x22\x3b\xb5\xe0\x27\xa1\x9c\x18\xf1\x55\x64\xe6\xb1\x83\xf8\x2c\x83\x07\xe5\x1b\x38\xfb\xe5\x0c\x1a\xe9\x06\x6b\xc5\xd6\xbf\x36\x81\x7c\x4f\x8d\x4e\x34\x68\xf3\xf5\x7f\xb0\x64\xe3\x08\x0d\x11\x0d\x84\x66\x99\xf7\x3e\xc4\xf0\xe4\x7b\x5f\x63\xdc\x39\xbd\x8a\xe9\x49\xbc\xa2\xb7\xaa\x6f\xa4\x06\xa3\x11\x5a\xa5\xf9\x84\x7b\x9f\x6a\xf8\x84\xd7\x58\x19\x5b\x43\x1a\xb1\x71\x8e\x63\xf5\x75\x89\x1a\xad\x64\x5e\x25\x03\x89\xdd\x60\xb7\xfb\x3e\x38\x87\x74\x00\xc7\xe6\xec\x7d\x1a\x2f\x4b\x43\x33\xb3\x7b\xac\x4e\x46\x5f\x1c\x23\x1c\xe9\x20\xc7\xbe\x05\xed\x73\x8d\x5e\xc4\x71\xc6\xf3\xe9\x94\xe8\xcd\xb9\x71\xfa\xbb\xb4\xfc\x37\xdf\xae\x75\x22\xfa\xef\xfc\x87\xa0\x64\x31\x13\x88\x9d\xc0\x7c\xa5\xb8\x72\x63\x98\x23\x90\xf7\xcc\x06\x52\x90\x19\x5c\x49\x5d\x61\xde\x61\x5e\xa6\x30\x47\xd0\x1a\xce\x7f\xc5\x28\x33\xbc\xc1\xb6\x13\x77\xb8\x16\x73\xa5\xeb\xa3\x16\x8f\x10\x59\xfe\x57\x57\x6f\xde\x17\xe9\x5d\x63\x1e\x8e\x52\xe7\xcb\xbe\xb9\x7e\xf3\xbf\x57\x53\x98\x35\xe6\xe1\xd9\x2b\x55\x23\xc4\x2a\x4a\x89\xe8\xad\xf4\x2f\x12\x5d\x4e\xe1\xea\x71\xbb\xc7\x27\x00\x9f\x4f\xbe\xfd\x13\x00\x00\xff\xff\xc3\x7b\x73\xbb\xa0\x1a\x00\x00")

func resMessages_enJsonBytes() ([]byte, error) {
	return bindataRead(
		_resMessages_enJson,
		"res/messages_en.json",
	)
}

func resMessages_enJson() (*asset, error) {
	bytes, err := resMessages_enJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/messages_en.json", size: 6816, mode: os.FileMode(420), modTime: time.Unix(1567566258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resMessages_zhJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x59\xdd\x4e\xe3\x48\x16\xbe\xe7\x29\x2c\xa4\x88\x5d\x2d\x62\xb4\x3f\x57\xdc\xec\x4a\xb3\x7b\x31\xd2\x6a\x2f\x46\xab\x95\x56\xcd\xc8\x32\x76\x11\x2c\x92\x72\xe4\x2a\x33\x4d\x8f\x46\x4a\x18\x20\xa1\x93\x40\x66\x68\xa0\x09\xa1\x21\xb3\x09\xa4\x61\xf2\x33\x0b\x0b\xe9\xfc\x34\x0f\x33\xae\xb2\x73\xc5\x2b\xac\xec\x4a\x67\xd2\x74\x5c\x65\x6e\x10\x89\x5d\xdf\x39\xa7\xea\x3b\x5f\x9d\x73\xf2\xcd\x94\x24\x4d\xc7\x14\x18\xb5\x94\x28\x98\x9e\x97\xa6\x5f\x2c\x4f\xcf\x7a\xdf\xc5\x01\x42\x4a\x14\xa0\xe9\x79\xe9\xd9\x94\x24\x49\xd2\x37\xfe\x5f\x49\x9a\xd6\x35\xef\x3d\x6c\x60\x25\xe6\xbf\xea\x7f\x89\x4d\x05\xa2\x98\x82\x75\x03\x7a\x4f\x49\x21\xe3\x36\xca\xd3\xfe\xd3\x6f\x67\x27\xad\x4f\x28\x08\x05\x2e\x1f\x24\x8b\xee\x7d\x9a\xb7\x7c\x49\xd1\x39\xd6\x2b\x3f\xbb\x37\x55\xde\x72\xb4\xa2\x27\x02\x97\xbb\x77\xd7\xe3\xd6\x27\x7a\x6f\x1a\x9a\xa5\x62\x59\xd7\x02\x51\xec\xce\x05\xd9\x4b\x7d\xa1\xf1\xdc\x88\x1b\x9a\x15\x03\x3c\x14\x5a\x2b\x93\x93\x43\x3e\x0a\xb2\x74\xcc\x05\x21\xd5\x43\xbb\x7b\xcb\x07\xc1\x0a\x5a\xe1\x86\xd3\xed\x92\x97\xe5\x31\x8c\x89\x20\x00\x61\x59\x55\x10\x08\x84\x71\x5e\xd5\xec\xf7\x59\xae\x23\x1e\x86\x1f\x52\xf0\xa6\xfc\x2f\xeb\x36\xf7\x59\x54\x62\x28\xd5\xd4\x13\x58\x80\xe5\x6e\x14\x69\xe9\x27\x1e\x96\x09\x90\x15\x0b\x86\x71\xba\x7b\xf4\x4d\x89\x7b\x4a\x18\x04\x53\x8e\xd6\xab\x83\xcb\x0a\x6f\xb9\xba\x0c\xd4\x95\x84\xa1\xc3\x60\x1f\x06\x97\x39\xb7\x99\x72\xd6\xdf\xf1\x70\xc0\xf3\x04\x50\xb1\x2c\x08\x87\x96\x4e\xc9\xfb\x4d\x71\x50\x8a\x8a\x2d\x25\x26\x42\x23\x8d\x37\x83\xa3\x10\x68\xaa\x01\x31\xe0\x04\x48\xb6\x36\x49\x83\x1b\x1d\x4b\x28\x41\x36\x71\x5d\x50\x30\x88\x1a\xe6\x5a\xf0\x41\x1f\x37\x48\x7f\x9f\x07\xb1\x0a\x4c\xe4\xbd\x3c\x42\x18\x4a\xa9\xf7\xec\x5f\x8f\x9f\x3d\x46\xdf\xce\x08\x78\x88\xc0\x2a\x30\x75\x1c\xec\xa0\xdd\xae\x0e\xd2\x79\xa7\x73\x41\x32\x57\x5c\x01\x36\x75\x83\x0b\xe4\xdc\x5c\xd0\x64\xd5\xa9\x65\x49\xe7\x9c\x9b\x65\x3a\x8e\x01\x59\x55\x20\x34\xb0\xbc\x08\x64\x10\x4f\x70\x50\xe9\x59\x7a\xf0\xe3\x6b\xbb\x9d\x77\xbf\xeb\xdb\xed\x8e\xf3\xb6\xf3\x4b\x72\x9d\x2b\x2a\x10\x00\x4d\x56\x0d\xb8\xa4\x47\x83\x99\x51\xaa\x91\x66\x8f\xa4\x3b\x4c\x5f\xec\x77\x59\xb2\x9d\x7f\xe8\xe5\xe8\x7a\x6d\x50\x4a\xba\xe7\x29\xb2\x99\x19\x6c\xe6\x9d\x7e\xc3\x39\xdf\x1c\xa4\xf6\x9c\xab\x23\x67\xfd\xdd\xb8\xe5\x09\x86\x17\x41\x54\x87\x42\xcb\xbd\x24\xb9\xc8\x32\xec\x59\xc9\x7d\xbf\x47\x36\xab\x33\xe0\xb9\x8e\x67\x06\xc9\x24\x49\x0b\xa3\xfb\x5a\x81\x58\xc6\x86\x67\x06\xeb\xd0\xe2\x28\x67\xb9\xe1\x36\x2a\x4e\xf7\xc2\xe9\xd6\x9f\xfd\xfb\x33\xf8\xd5\x9f\xf9\x3c\x46\x40\xb6\x12\x9a\x82\x01\x8b\xc0\x8c\x73\xa4\xbd\x6a\xb7\xb3\xc3\x9d\xbb\x2f\xd3\x54\x93\xb4\xb6\xdc\x1f\xaf\xe8\xf1\x0d\x3d\x68\x91\x4c\x8b\xed\xd9\xfc\x02\x94\xd8\xe9\xcd\x4b\x11\xc4\xd5\x18\x88\x81\x29\x6b\xba\x19\x7c\xc5\xfa\xfb\x14\x41\x2c\x9b\x1e\x7a\x45\x1e\x9c\xa6\x9b\xb2\xc7\x2d\xf0\x5c\x47\x1c\x05\xf6\xa1\xec\x76\x9e\xd4\x5f\x93\x52\x4d\xec\xdf\xa8\xea\x09\x74\xb2\x79\xc7\xfc\xb4\xfb\x67\xb4\x74\x4a\x4b\xc7\x76\xff\xde\x79\x55\x73\x8a\x1b\x6e\xb3\xee\xd6\x92\xf3\x0b\xf0\xf7\x73\x92\x9b\xfd\x99\x1e\xa4\xa5\x08\x5a\x80\x7f\x98\x93\xec\x76\x9d\x7d\x12\x08\xdd\x92\x1e\x95\x5f\x00\x88\x15\x43\x46\xbc\xbb\xce\xd9\x69\x79\xe4\x1e\x63\x19\x29\xe4\x86\x24\xbe\xee\x3a\xdd\x53\xa7\xb8\x41\x0a\x39\x5a\xaf\x92\xdd\x75\xba\xdf\x12\x53\x83\x45\x6f\x99\xc1\xf5\xd3\x28\xf0\xf1\x64\x71\x8a\x1b\x4e\xff\x7b\xe7\xea\xe8\xa1\x57\x0c\x73\xfc\x8a\xaa\x1a\x16\x47\xcc\x7f\x35\x72\xd4\x25\xfd\x7d\xf7\xe6\x9c\xec\xde\x85\xc4\xf6\x8a\xc7\xaf\x0d\x33\xb8\x5a\x19\x81\x33\x58\xd2\xdc\x72\xce\x52\x21\xc1\x55\x43\xc6\x6b\x09\x2e\x2d\x06\xc9\x6d\x9a\x7d\xcb\x32\x86\x9e\x54\x69\xa7\xe0\x33\x81\x95\x7c\x1f\x98\xc0\x2e\x1b\xff\xd3\x1f\xe7\x24\x56\xad\xf8\x9f\xfe\x34\x27\xb1\x6a\x2a\x54\x1a\xa9\x86\xac\x43\x0d\x24\x00\xd4\x78\x77\x23\x7d\xdd\x24\x85\x73\xd2\xda\x1a\x7a\x35\x76\x81\xdb\xf7\x27\x2c\x27\x9c\xec\x4f\xce\x55\xd6\x29\x6e\xd0\x83\xb4\xdd\xbd\xb5\xdb\xf5\x67\x6b\x9f\xfd\x23\x0c\x5b\x54\x23\x54\xba\xb0\x7d\x61\xc5\x14\x4b\x91\x5f\x92\xeb\xa1\x82\xf4\xe4\x4a\xd7\xe4\x25\xc3\x94\x4d\x90\x30\x4c\x2c\x2f\x5a\xc1\xa2\x3b\x3a\x5e\xba\x5e\xa3\xdf\x5d\xd3\xdd\x82\xdd\xa9\x38\xbd\xce\xe0\xe8\xce\xa3\xa9\xbf\x03\x5f\xfc\xf5\xa1\x97\xfb\x54\x8f\x85\x69\x69\xc6\x65\xd5\x88\xc7\x75\x61\x8d\xc4\x04\x99\xd9\x1e\x4a\xe8\x70\xbb\x3d\x09\x65\x79\xb8\x00\xc7\xa2\x9f\x64\x52\x87\xab\x4a\x4c\xd7\x64\x1d\x26\x2c\xce\xe1\x1e\x9e\xd1\xfd\x0c\xdd\x6f\xd1\x7c\xc3\x8b\xaa\x79\x37\x48\xe7\xe9\x41\x8b\x85\x27\xb8\xc6\x86\x2a\x33\xd4\x1c\x64\xa9\x2a\xe0\xb4\x5e\xe3\xd2\xe2\xde\xbf\xa1\x3b\x55\xa6\x3a\x34\x53\x20\x2f\x4f\x9f\x64\x8a\xdb\xa3\x05\xd9\x61\xbd\x9b\xe8\xd6\x54\x2d\xd3\x04\x10\x0b\x2f\xe7\xfe\x1e\xd9\xce\x33\x60\xc1\x25\x03\x82\x8b\x32\x26\xf0\xdc\xb8\x97\x39\xe5\x58\x5d\xb0\x18\x59\x09\x9f\xf0\xc2\x04\x23\xbb\x97\xf4\x55\x93\xe6\x52\x2c\xb5\x00\xfc\x4d\x04\xfd\x96\xfc\x90\x7b\xb1\xec\xfd\x23\x38\x1a\x68\xf8\x49\x16\x7c\xf0\xb4\x74\x49\x76\xbf\x77\x76\x5a\xac\x23\x62\x49\x24\x06\x65\xed\x55\x68\x58\xa6\x0d\x02\xd8\x21\x47\xbd\xb2\x28\x66\x44\x75\x4e\xb9\xec\x5f\x1d\xa1\xa8\xe9\x91\x31\x2c\xe0\xa7\x1c\x9c\xe4\x24\x56\x4c\xaf\x26\x01\xaa\x85\x79\x25\x3d\xbb\xba\xe9\xf6\x85\x5b\xce\x09\x20\x01\xd4\x42\x00\x7a\x2a\x73\x72\x1a\x0a\x90\xf9\xc8\x6d\xc8\x99\x7b\xec\xb4\xa5\x08\x92\x22\x28\x84\x93\xfc\x16\xdf\xf7\x6f\x1c\xd1\x93\xac\xe4\x21\x3d\xbc\x8d\x68\xce\xc5\x0f\xa2\xdc\x36\x2d\x28\x64\x95\x7b\x5f\x70\xcb\x39\x46\xa6\x99\x08\x9a\xb1\x3b\x3b\x11\x44\xf7\xf2\x76\xbf\xc4\x24\x45\x10\x04\xd6\xe3\x40\x5e\x32\x8d\xb8\x8c\x0d\x4e\x5d\xbc\x13\x41\x24\xd3\x8a\xa0\x59\xe9\x09\xfe\x7b\x99\x36\x6a\xd6\x39\x89\xf1\xdf\x32\x2d\x6d\x8f\x7a\x76\x11\x2a\xc2\x20\xc1\x01\x13\xce\x0f\x0c\x18\x5b\x93\x3f\x48\x0d\xdb\xde\xa7\x28\xce\xd8\x95\x2e\x64\x88\x3f\x1a\x94\xc5\xb3\x20\x36\x24\x8c\x68\x76\xfb\x32\x48\x73\x26\x5e\x99\x48\x0e\x31\x0c\xf9\x8b\x47\xec\xca\x8d\x53\xdc\xb0\xdb\x1d\x52\xb8\x1a\x6d\xb4\x57\xfe\xf8\xbb\x25\x88\x62\xcd\xb0\xbc\xba\x47\x03\x48\x5e\x06\x26\x67\xa6\x50\xaf\x90\xca\x86\xd3\x3b\x20\x5b\x47\x8c\x81\x0c\xde\xee\xfe\xc7\x39\x4b\x89\x92\x69\x7c\x1a\xf3\xc8\xce\xd8\xd8\xe0\x6f\xfe\x6b\xd2\x97\xfe\x6b\x3c\xad\xf5\x9a\x14\x56\x85\xcc\x4a\x64\xb7\x69\x77\xab\xb4\xb4\x4d\x2a\x45\xb1\x54\x7c\x34\xc9\xe1\x47\xec\x55\x1d\xe9\xce\x68\x43\xc7\xa7\x3b\xe1\x85\x3d\x0a\x20\x30\x15\xde\x90\xcf\x57\x75\x92\x39\x26\xdd\xce\x18\x47\x18\x13\x67\x25\xd6\xee\xcd\x4b\x5e\xf6\x87\xb7\x3a\xac\xec\xb8\xb4\x64\x86\x59\xf3\xcb\x18\x19\x11\x8c\x5f\x47\xf0\x21\x4a\x57\x86\x6e\xb7\x87\x93\x8a\x08\x1a\x2f\x5e\x9f\x16\x85\x68\x86\xf7\xc8\x92\x36\xb4\xf4\xf1\x18\x6e\xa2\x56\x98\x13\x59\x68\x04\xf7\xf3\x34\x73\x10\xa2\x2e\xe4\xf5\x9c\xac\x1e\x24\xa5\x16\x39\x49\xf2\x47\xef\x31\x24\xfb\x4d\x83\xb8\x3b\xe0\x6f\xe7\x62\x5c\xe7\x6c\x9e\xbf\x57\x5c\x00\x65\x35\x98\x43\xac\xe5\xe2\x0f\x68\xa0\x0a\x38\x3f\x61\xec\x1e\xd0\xdb\x0c\x17\x20\x66\xf0\xb4\x75\xf3\x7a\x70\x58\xe7\xad\x5f\x06\xb1\x84\xbc\x02\xd6\xe4\x45\x1d\x72\x7e\x3a\x68\x37\xc8\xcb\xb7\x42\x1c\xaf\xc1\x0a\xc4\xf8\xfc\x9f\x5f\xfe\xfd\x77\x9f\xcf\x4b\x1f\x35\x60\x53\x92\xf4\xd5\xd4\xb7\xff\x0f\x00\x00\xff\xff\x29\x80\x57\xeb\x7f\x1a\x00\x00")

func resMessages_zhJsonBytes() ([]byte, error) {
	return bindataRead(
		_resMessages_zhJson,
		"res/messages_zh.json",
	)
}

func resMessages_zhJson() (*asset, error) {
	bytes, err := resMessages_zhJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/messages_zh.json", size: 6783, mode: os.FileMode(420), modTime: time.Unix(1567566452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resResGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x9a\xdb\x6f\x1c\x57\x72\xc6\x9f\x39\x7f\xc5\xac\x80\x5d\x90\x81\x4c\xf6\xfd\x22\xc0\x2f\x6b\x3b\x80\x03\xac\x17\x48\x9c\xa7\x9c\xc0\xe8\xcb\x69\x69\x12\x92\xc3\xcc\x0c\x37\x47\x34\xf4\xbf\x07\xbf\xaa\xaf\x39\xd4\x8a\xb2\x81\x60\x1f\x46\xe2\x74\x4f\x9f\x4b\xd5\x57\x5f\x7d\x55\xa7\x6f\x6e\xb6\xdf\xed\xe7\xb8\x7d\x1f\xef\xe3\x61\x38\xc5\x79\x3b\x7e\xdc\xbe\xdf\x7f\x33\xee\xee\xe7\xe1\x34\x5c\x6f\x6e\x6e\xb6\xc7\xfd\xe3\x61\x8a\xc7\x77\xfc\x7d\x88\xc7\x9b\xbb\x78\x3c\x0e\xef\xe3\xf1\x97\x78\x7f\xfd\x5f\xc7\xfd\xfd\x17\xd7\x9f\x3e\x7c\x76\xfd\x10\x8f\xd7\xef\xf7\xeb\xb7\x79\x3f\xdd\x1c\x87\xbb\x87\xdb\x78\x7d\x4a\xa7\x97\x57\x1f\x79\xfa\xe5\x45\x06\xb9\x99\x86\x63\xfc\x66\x39\xec\xef\xbe\x79\x38\xec\xe7\xfd\x74\xfa\x6c\x6c\xfb\xc9\xf1\x71\x9a\xe2\xf1\xf8\xe5\x8d\xa7\x78\x7f\x1a\xf6\xdf\x1c\xe3\xe9\xb4\xbb\x7f\xff\xf9\x0f\x4e\xf1\xee\xe1\x76\x38\xc5\x9b\x71\x38\x5d\x9f\x1e\x6e\xbf\xb8\xfe\x7e\xff\xea\xe5\xdb\xc7\xe1\xd5\xeb\x0f\xf1\x70\xfb\xfa\x8d\x0f\x0f\xaf\x5f\xff\x78\xfa\xb0\xbf\x7f\xf5\xd6\x21\x0e\xf3\x5d\xfc\x26\xfe\xe6\xdd\xa7\x0f\xaf\xdf\x7d\x1c\x3f\xbe\x7a\xe3\xf8\x21\xde\xbe\xbe\xc2\xd3\xf4\x7c\xfd\xfb\xbf\x6e\x7f\xfa\xeb\xcf\xdb\x1f\xbe\xff\xf1\xe7\x3f\x6c\x36\x0f\xc3\xf4\xdf\xc3\xfb\xc8\xaf\x37\x9b\xdd\xdd\xc3\xfe\x70\xda\x5e\x6e\x2e\xde\x8c\x1f\x4f\xf1\xf8\x66\x73\xf1\x66\xda\xdf\x3d\x1c\xe2\xf1\x78\xf3\xfe\x69\xf7\xc0\x85\xe5\xee\xc4\x7f\xbb\xbd\xff\x7b\xb3\xdb\x3f\x9e\x76\xb7\x7c\xd9\xdb\x03\x0f\xc3\xe9\xc3\xcd\xb2\xbb\x8d\xfc\xc1\x85\xe3\xe9\x80\x6b\xf8\xf3\xb4\xbb\x8b\x6f\x36\x57\x9b\xcd\xf2\x78\x3f\x6d\x85\xc0\x7f\x8d\xc3\x7c\xc9\x1f\xdb\xff\xf8\x4f\xa6\x7d\xbb\xbd\x1f\xee\xe2\xd6\x1f\xbb\xda\x5e\xae\x57\xe3\xe1\xb0\x3f\x5c\x6d\x7f\xdd\x5c\xbc\x7f\xb2\x6f\xdb\x77\xdf\x6e\x59\xd5\xf5\x4f\xf1\x7f\x19\x24\x1e\x2e\x6d\xd9\x7c\xff\xf3\xe3\xb2\xc4\x83\x0d\x7b\x75\xb5\xb9\xd8\x2d\xf6\xc0\x1f\xbe\xdd\xde\xef\x6e\x19\xe2\xe2\x10\x4f\x8f\x87\x7b\xbe\xbe\xdd\x2e\x77\xa7\xeb\x1f\x18\x7d\xb9\x7c\xc3\x40\xdb\x3f\xfe\xcf\xbb\xed\x1f\xff\xf6\xc6\x57\x62\x73\x5d\x6d\x2e\x3e\x6d\x36\x17\x7f\x1b\x0e\xdb\xf1\x71\xd9\xfa\x3c\x3e\xc9\xe6\xe2\x17\x5f\xce\xb7\xdb\xdd\xfe\xfa\xbb\xfd\xc3\xc7\xcb\x3f\x8d\x8f\xcb\xdb\xed\xfb\xa7\xab\xcd\xc5\x74\xfb\xc3\xba\xd2\xeb\xef\x6e\xf7\xc7\x78\x79\xb5\xf9\x47\xad\x87\x61\x7c\xfc\xaf\x0c\x14\x0f\x07\x5f\xb7\x2e\x8e\x8f\xcb\xf5\x9f\x59\xfa\xe5\xd5\x5b\x7e\xb1\xf9\xb4\xd9\x9c\x3e\x3e\xc4\xed\x70\x3c\xc6\x13\x26\x7f\x9c\x4e\x8c\x62\xfb\x93\x3f\x36\x17\xbb\xfb\x65\xbf\xdd\xee\x8f\xd7\xff\xbc\xbb\x8d\x3f\xde\x2f\xfb\xe7\xe7\xe4\xc2\xf5\xfa\x8b\x11\xcc\x87\xdb\xad\xdc\xb8\xb9\x38\xee\x9e\xec\xfb\xee\xfe\xd4\x54\x9b\x8b\x3b\x28\x69\xfb\x3c\xe8\x5f\xf6\x73\xb4\x8b\x3f\xef\xee\xe2\x16\x98\x5c\xf3\x17\xf3\x18\x54\x2e\x97\xdd\xdf\xcf\x75\xb5\xfd\x69\xb8\x8b\x97\x57\x9a\x81\x39\xb5\xcb\x65\x77\xcd\xec\x9b\x4f\xbf\xf1\xec\xbf\xed\x9e\x78\xd6\x56\xf3\xf9\xa3\x2c\xf4\x37\x1f\x65\xad\x97\x57\x2f\x57\xfe\xf9\x00\x6c\xed\xf7\x06\x60\x73\x97\x57\xe7\x8d\x7e\x31\x82\x76\xff\xf5\x41\x7e\x3c\x7e\xbf\x3b\x5c\x5e\x6d\xc7\xfd\xfe\xf6\xe5\xd3\xc3\xed\xf1\x77\x76\xfe\xf1\xe8\x1b\x8f\x87\x65\x98\xe2\xaf\x9f\x5e\x3c\x2d\x48\x80\xf2\x5f\x0e\xf1\xf8\x97\x73\x1a\xf8\x97\xe3\xfe\x7e\xfb\xad\x10\x71\xf9\x26\xa4\x7c\x09\xa9\x1b\x43\xca\xba\x90\xb2\xec\xf5\xcf\xb2\x84\xd4\x4f\x21\xd5\x5d\x48\xf5\x1c\x52\xb3\x84\x94\x8f\x21\x8d\x6d\x48\x79\x11\x52\x3b\x87\xb4\xb4\x21\x0d\x5c\xef\xf4\xc9\x42\x6a\xa7\x90\x8a\x25\xa4\x21\xfa\xbd\xae\x0c\xa9\x8d\x21\x95\x53\x48\xb1\x0f\xa9\xa8\x43\xaa\xe6\x90\x72\x3e\x6d\x48\x59\x1f\x52\x9f\x85\x54\x34\x21\x75\x79\x48\xb1\x0e\xa9\x6c\x42\xaa\xba\x90\x62\x19\x52\x97\x85\x34\x30\x2e\xd7\xda\x90\xea\x21\xa4\xa9\x08\xa9\x18\x43\x6a\x8b\x90\x26\xf6\xb1\x84\x34\x8f\x21\x55\x83\x8f\xc5\xda\xeb\x18\x52\x36\x85\x34\x32\x7e\x11\x52\xdd\x84\x34\x16\x21\x95\x5d\x48\xf3\x14\xd2\x52\xf9\x5a\xba\x2e\xa4\x92\xff\xdb\x90\x9a\x36\xa4\xae\x09\x29\x56\x21\x2d\x99\x7f\xda\x2c\xa4\x11\x5b\x44\xb7\x0b\x36\x19\x9b\x90\xea\xc2\xf7\xc9\xfe\x6a\xf6\x56\xf8\xfe\xf2\x2a\xa4\x2a\x86\x54\xe7\xbe\x0e\x3e\x1d\xeb\xeb\xfd\x7e\xd9\x87\xb4\xcc\x21\x8d\x53\x48\x15\xcf\xb4\x3e\x1f\x36\x9d\xe7\xf3\x18\x65\x0c\xa9\x9f\xcf\xfe\xc0\xae\xdd\xec\xe3\x65\x85\xaf\x63\x60\xbf\x83\xdb\x67\x8e\x21\xb5\x9d\xcf\x53\x35\x21\x35\x5d\x48\xcb\x14\xd2\x9c\x87\x54\x8f\x21\x0d\xbd\xfb\x11\xbb\x8d\x73\x48\x65\xa1\x67\xb1\x49\x1b\x52\x99\x87\x94\x0f\xbe\x9f\x79\x09\x69\x8a\xbe\xee\x8c\x35\xe1\xcf\x2a\xa4\xb6\xf4\xf1\x19\x93\x6b\x45\x1f\xd2\xd4\xb9\x9d\xb1\x37\x3e\xeb\xf1\xef\xe2\x7b\x04\x2f\x59\x1d\x52\xcf\xef\x78\x26\xba\x6d\xda\xda\xc7\xe1\x5a\x59\x86\x94\x0d\x21\x35\xd8\xb7\x71\x6c\x0e\xb3\xfb\x93\xf5\x95\x43\x48\x75\xe5\xe3\x0f\x9d\xbe\x2f\x8e\xbf\x0e\xff\x67\x21\x45\xfd\x96\xbd\x35\x65\x48\x4d\x1d\x52\x1c\x42\x9a\xc1\x15\xbf\x69\x43\x5a\xc0\x21\x18\xa9\xdc\xbe\xd8\x07\xbf\xd5\x99\xfb\xb6\xd1\x3a\xf3\xdc\xed\x59\x65\xee\xd3\xa1\x0e\x69\x1c\x1d\x8b\x60\x87\x75\x62\x0b\xae\xb1\x3f\x70\x90\x4f\x8e\x5b\x7b\xa6\x0d\xa9\xaa\x1d\x5b\x60\xbc\x01\x2b\xbd\x62\x2d\xf7\xf1\xd9\xb7\xd9\x09\xdb\x63\xd7\xdc\xc7\x59\xfa\x90\x9a\xc1\x31\x59\xb4\x6e\xab\x81\x35\x4f\xb2\x01\xb6\xaf\xfd\x77\x60\xa0\x2e\x3d\x16\xca\xcc\xef\xe7\x8d\x62\xb5\xf3\xfd\x16\x93\xdb\xa9\xef\xdc\x9e\x45\xe5\x3e\x65\x3c\xe2\x06\x8c\x8e\x99\x3f\xcf\xde\xda\xc5\xc7\x61\xcd\xe0\x61\x1a\xdc\xb7\x16\xe3\x60\x65\x72\x1f\xe2\x83\x01\x7b\x56\x1e\xdb\x86\x47\x30\x24\x4e\xa9\x88\x5b\xcd\x85\x0d\x88\x3d\xfc\x97\x6b\x8d\xd8\xb2\x10\xf6\x22\xf1\x35\x84\x34\x76\xce\x01\xc4\xe8\x52\x84\x54\xe5\x1e\x67\xd8\x91\xfb\x70\x05\xb6\xb3\x58\x2d\x9c\x5f\xc0\xf0\x3c\xf8\x78\xc4\x69\x17\x1d\xdb\xac\x69\x92\x9d\x98\x7f\x6a\x42\xca\xa2\xfb\xc6\xb0\xdd\x3a\xff\x0d\x6d\x48\x63\xed\xcf\xb2\x6f\x30\xb9\x0c\xee\x5f\x7e\x63\xbe\xcf\x1d\x5f\xc4\x1f\xf3\x1b\xa6\x33\xdf\x23\xfc\x63\xb1\xdd\x68\x6d\x93\xb0\x96\x3b\x97\x80\x65\xe6\x64\xfd\xf0\x1c\x31\x43\xec\xb0\xf7\x7e\x71\xbb\x82\x57\xf6\x09\x36\x5a\x61\xae\x99\x1d\x1f\x4d\x1e\x52\xd5\x7b\x6c\xc3\xbf\xcc\x0b\x77\xf1\xdb\x9a\xb5\x45\xc7\x5a\xad\xdf\x11\x37\x9d\x78\x95\x58\xc5\xde\xd8\x95\x58\x80\xd7\xba\xc9\xe3\xdb\xf8\x07\x3c\xe4\x8e\x89\xf5\x33\x69\x8f\xd8\x0a\x1e\x85\x13\xf9\x60\x93\xa2\xf3\x18\xeb\xf1\x5d\xf4\x79\xc8\x0d\xd8\x11\x9c\x44\xfe\xae\x9d\x9f\x57\xcc\x97\x8b\x3f\xc3\xba\xc1\x43\x56\xfa\x3e\x8a\xcc\xfd\x1b\x73\xe7\xd0\x59\xf1\x0d\xc6\xb0\x01\xf6\xc7\x36\xad\xb8\x35\xd7\x3c\xe4\x17\xb8\xbe\x1f\xdd\x9e\x4b\xf4\xd8\x83\xe7\xb0\x71\xa5\x18\x9d\x4a\xcf\x15\xc4\xe4\xb4\x78\x3c\xc0\x53\xf8\x9e\x79\x2d\x7e\x46\x8f\x65\xf0\x14\x1b\xb7\x13\x18\x18\xc5\x37\x93\xd6\x90\x55\x8e\x31\xec\x0d\x57\x30\x0e\x7e\x27\xb6\xa6\x59\x7c\xa9\xf5\xb7\x2b\xf6\x7b\xe7\xf7\xb9\x70\x1b\xcf\xab\xdf\xc5\xa7\xc4\x51\x25\x6e\x27\x7e\x17\xe5\xc1\xa2\xf4\x3d\xcd\xa5\xe3\xa8\x91\xed\x8d\xbb\x4a\xf7\x37\xe3\x80\xe9\x4e\xfc\x06\x1f\x30\x0f\x38\xc2\xd6\xc4\x80\x71\x40\xed\xbe\x6a\xc5\x71\x60\x8a\x3d\x83\xab\x5a\x58\x59\xf7\x8b\x7d\x8d\xbb\x7a\xf7\xe1\x90\x7b\x6c\x83\x13\xc6\x26\xaf\x66\xc2\x54\xa3\x7d\x63\x63\x72\x28\xb1\xcd\x9e\xc1\x25\x71\x40\x4e\xa8\xa4\x1b\x88\x1d\xee\xc5\xd9\xd7\xcd\x9a\xc1\xc7\x2c\xfb\x90\xe3\x0c\x6f\x85\xc7\x3e\xb8\x83\xff\x1a\xe5\x07\xb3\x55\xef\x6b\xce\x6b\xb7\x33\x1c\xbd\x74\x9e\x0b\x6a\xe5\x1d\xcb\x09\xd1\xe3\x8a\x3d\xf2\xbb\x46\x36\xc5\x6f\xd8\x9b\x75\x13\xc7\xc4\x3b\xcf\xc3\x31\xad\xe2\x01\x0e\xec\x94\x9f\xb0\x53\x25\x3e\x01\x4b\xf0\x09\x36\x06\xcb\xcc\x47\xbe\x31\x1b\x46\x8f\x5b\xb0\x0f\x86\xe0\x50\x78\x7c\x94\xcf\xf0\x1f\x6b\x01\x57\xcc\xdd\x57\x9e\x97\x2d\xa6\x6a\x1f\xb3\x5a\x73\xb2\x7c\x0b\xe6\x26\xed\xd5\xb8\x4c\xf9\x0c\xae\x00\xab\x8b\xf0\xcb\xd8\xf0\x6d\xae\x18\xc6\x1f\xa6\x6b\x3a\xb7\x2b\x79\x81\x7b\x79\xf4\x5c\xd6\x64\xce\xff\xac\x8f\xd8\x21\x4f\x0e\x8a\xdb\x4c\xeb\x22\xf6\x59\x1b\xb1\x57\xce\xae\xb7\x88\x2d\xf2\x00\x9a\x05\x1c\x80\x01\xd6\xb3\x88\x03\x88\x79\xf8\xa7\x29\xdc\x8e\xf8\x0b\xbb\xf1\x5c\x23\x0c\x32\x7e\x2f\x1c\x15\xf2\x01\x1f\xfc\x82\x8f\x86\x75\xde\xd9\xe7\x21\xb6\xf0\x07\x1f\x78\x64\xa9\xa5\x1d\xa3\xfb\x0c\x2e\xc7\x6e\x4b\xe3\xf6\x01\x77\xec\x95\x5c\x8a\xdd\xa3\x78\x1d\xbe\x40\x57\x75\xe2\x54\xb8\xd8\x7c\xb8\x38\xd6\x5b\x69\x00\x6c\xff\x9c\x0b\x87\x73\xae\x40\xa3\x60\x57\xfc\x43\x3c\xa3\x53\xda\xde\xf9\x1e\x6e\xc4\x1f\xe0\x07\xcd\x53\xc3\xf1\xe2\xb7\x41\xbc\x0d\x1e\xd6\x7c\x87\x4e\x9b\xa4\x8b\x58\x1f\xfb\x6e\x94\x87\x58\x07\x3e\xc5\x56\xf8\xc3\xec\xb0\x78\x7c\xf5\xca\x87\xe4\x40\xd6\x08\xde\x1a\x69\xc0\xa8\x18\xce\xc5\x61\xc5\x2c\x2d\x32\xbb\x6d\xd9\x7f\xa7\xfc\x65\x7a\xb9\xf0\xdf\x13\x37\xe8\x01\x6c\x0e\x56\xd8\x0b\xf9\xb2\x11\xff\x81\x4b\xcb\x05\xbd\xc7\xde\xa2\xbc\x0e\x26\xf0\x2f\x79\x04\x3b\x10\xdf\x8c\xcb\x07\xdc\x91\xe7\xf0\x3d\xd8\xc0\xdf\xc4\x24\x79\xab\x1a\x5d\x5f\x61\x27\xec\xf0\xac\xc3\x85\xe1\x51\x7c\x38\x34\x6e\x63\xec\xd5\x2a\x9e\xc8\x31\x8c\x5d\x49\xf3\x31\x26\xb6\x43\xc7\xb1\x3f\xe6\x03\x53\x83\xf0\xc5\x5a\x19\xdb\x72\xa3\xf8\x7a\x14\x27\xc0\xf9\xad\x38\x3d\x97\xe6\xc4\x26\xe4\xc6\x5c\xf9\x83\xb9\x9b\xde\x35\xab\xc5\xd1\x7c\xd6\xf7\xac\x61\x10\x2f\x81\x07\x70\xc9\x7e\xe0\xb5\x66\x74\xcd\x96\x09\xd7\xd8\x9d\x78\x5a\x73\x0c\x7e\x04\x83\xf8\x9f\x75\xa1\x9d\xd0\x2e\x96\x2b\x4b\x8f\x21\xf0\x8e\x3e\x20\xbf\x60\x23\xb0\xc5\x77\x6c\x80\xef\x5b\xe9\x2d\x6a\x11\xf4\x8f\x8d\xd3\xb9\xbe\x03\x0b\x96\xc3\x66\xe7\x5e\xd3\x74\xd1\x7d\x08\xef\xb0\x6e\x74\x2f\xbf\x9d\xc5\x31\x70\x37\x75\x11\x18\xaf\xa4\xfd\xe0\x67\xe6\x81\x1b\x66\xe9\x5a\xb3\x69\xab\x98\x03\x6f\xbd\xff\x16\x4e\x8a\xaa\x43\xc0\x5e\x26\x7b\x11\xab\xa5\xe6\x80\x87\x88\x49\x74\x2c\x63\x60\x27\x62\x8f\x71\x78\xde\xec\x38\x7a\x5e\xac\x54\x67\x1a\xee\x5b\xcf\x07\xe4\xc2\x56\xfe\xa6\x86\xb1\xdc\xd2\xba\xdd\xf1\x3f\x38\xeb\xa5\xed\xf1\x1d\xbe\x61\x2d\x96\x87\x1a\xc7\x1d\xb9\x1b\x5b\xa2\x1b\xac\xee\xa9\x7d\x3c\xc6\x00\xf3\xab\x96\x04\x1f\xa3\xec\x03\x16\xd9\xe3\x22\xae\x37\x5e\x12\xd7\x14\xd2\x83\xb3\x34\x3c\x7b\xe8\x65\x77\x9e\x23\x66\x98\xa3\x52\xae\x2d\xa5\x39\x3b\xc5\x73\x27\xfe\xe1\x6f\xbb\x3f\x48\xbb\xa8\x56\x05\x7f\xe4\xcb\x4c\x39\x61\x50\x3d\xd3\x0e\x7e\xcf\xe2\x72\x72\x4e\xcf\xc5\x8d\xf8\x08\xff\x12\xd7\xab\x7e\x1b\x94\x9f\x4a\xe1\x89\x9c\xcf\xba\xb9\x8f\x16\xab\xa5\x4b\xe1\x8f\x4a\xb1\x48\xfe\x6c\x84\xb1\x5c\x3a\x0c\x1f\x17\xaa\x8f\xc0\x1f\xb8\x45\xbf\x59\xfd\x9f\x7b\xee\x00\x2f\x70\x02\x98\x33\xbb\xce\xbe\x4f\xf6\x01\x86\x72\x61\xc3\x62\x38\x73\x1b\x51\x03\xc1\x93\xe0\x04\x1c\x92\x9f\xc8\x55\xf8\x95\x3a\x98\xb9\xe0\x32\x70\xca\x3e\xd0\x32\x60\xd9\x74\x6c\xed\xb6\x00\x4f\xf0\xae\xe5\xea\xc6\xf3\x9b\x71\x6b\xe6\x18\x84\x37\x59\x67\xa9\xbc\x45\xbe\x20\x7f\xb3\x5e\x6c\x97\xc9\xf6\xe4\x96\x4e\xbe\x02\x07\x56\x87\x28\xff\x98\xbe\x9e\x9c\xcb\xb0\xb5\xf9\x3a\xf3\xbd\x5b\x5e\x92\x06\x31\x4e\x9e\x54\x43\x76\x3e\x4f\x2b\xee\xc2\x87\xb3\xb4\x07\x7c\xd6\x29\x6f\xa2\xd7\x2c\x3e\x3a\x8f\x43\xf2\x29\x39\x16\xbb\xb1\x57\xf2\x2a\xf6\x47\xaf\xf0\x2c\xb9\x78\xd5\x1d\xd4\x4e\xe8\x5e\xf8\x86\xb8\x30\x0e\xef\x5d\x6b\xcc\xca\x47\xf0\x5b\xa9\x79\xa9\xb3\xa8\x29\xd1\x76\xbd\x34\xf5\xa2\x3a\x02\x9f\x1b\x7f\xe4\xaa\x0f\x3a\xe7\x55\xcb\xe9\xd2\xd1\xe4\x58\xb0\x44\xbc\xf2\x9d\x78\x47\xaf\xc3\x3d\xd4\xed\xf8\x02\x5f\x12\x7b\xe0\xa7\x54\x3f\xc7\x72\xa4\x78\x0c\x1e\x28\xab\x73\x7d\x0a\x87\x12\x67\x66\xeb\xca\xeb\x38\xab\x93\x67\xe1\x78\x76\xac\xe2\x87\x7e\xcd\x45\xd2\x49\xc4\x26\xf9\xdd\xb8\x41\x75\x14\xf1\x59\x2a\x8e\x3b\xad\xad\x92\xd6\xc4\x5e\xa3\xb8\xa3\x51\x3f\x83\x75\xe3\x1b\xe6\xaa\xc5\xef\xf8\xbf\xd3\xb8\xa6\xbb\x06\xb7\x07\xd7\xb0\x2b\x79\x0f\x0e\x84\x8f\xd0\x89\xd8\x00\xbb\x81\x3d\x34\x5b\xb3\xee\x4b\xdc\x90\x2b\xa7\x37\xaa\x11\xc0\x64\xa6\x1a\x01\x9c\x83\x55\xd3\x8c\xa3\xef\xad\x54\x6e\x06\xff\x56\x1f\xb4\xee\x9b\xa8\x5a\x9e\xf1\x8c\x2f\x35\x3f\x39\x73\x54\x6f\xc3\xea\x8a\xe8\x31\x89\x4d\x88\x3b\xf4\x4d\xbe\xf6\xde\x34\x1e\xbc\x42\x8e\x03\x67\xf0\xbd\xd5\x72\xb2\x2b\xfb\x40\x03\xe1\x9f\xa8\xfc\x11\x85\x4f\xf8\x89\xfb\x60\x76\x54\xec\x81\xc1\x95\xe3\x06\xe9\xa6\x62\xd5\x62\x8b\xdf\x37\x7d\x27\x1f\x5b\x9f\xa9\xf4\x18\x20\x96\x26\xf5\xb6\xac\xd6\x56\x6d\x65\x9a\x57\xda\xcc\xfa\x79\xad\xf2\xa9\xfa\x6e\x5c\x33\x1f\x4c\x67\x0d\x0d\x97\x58\x9d\xac\x18\x31\x3d\x91\x39\xb7\x51\x27\x61\xb7\x29\x3a\xde\xc0\x29\xf5\xac\xd9\x6e\x72\x2e\x22\xa6\x58\x17\xf9\x86\x75\x98\x0e\x91\x9e\x33\x4d\xa9\x1c\xd3\x89\x1b\x6b\xd5\x9f\xf0\x68\x2d\x3d\xc7\xfc\xd4\xde\x71\x5d\x53\xe9\xfc\x6a\x35\x99\x7a\x7d\xa6\xe3\xa2\x6c\x19\xdd\xce\xc4\x8b\x8d\xa3\x7d\xaf\x35\x29\xf5\xb1\xe5\x34\xe9\x0a\xd3\xaa\x95\xf3\x34\xbc\x02\x86\xf0\xcd\x20\x9e\x04\x17\x79\xe1\x73\x83\x03\x9e\x47\xdf\x58\x5d\x32\xba\xef\xe1\x00\xeb\x63\x2e\xd2\x23\x51\x79\xbd\xfc\xbc\xf7\xbb\x48\x83\xb6\xd2\x1e\xa3\xf8\x39\x1f\xd6\xdf\xbd\x59\xcf\x82\xbe\xec\x36\xeb\x9c\xe2\xb5\xf3\x9f\xf5\x34\xe3\xc5\xf9\xd1\xe6\xe2\xe2\x95\x8e\xf5\xdb\xcd\xc5\xc5\x9b\xd7\x0e\x34\xdf\xbc\xdd\x5c\x5c\x3d\x9f\x2e\x7c\xf9\x20\xf3\xfe\x93\x1d\x8a\xbc\x9c\xd7\x4e\x45\x9e\x8f\x9e\xbe\xba\xe4\xdf\x3b\xde\x79\x3e\x95\xb1\x73\x95\x77\xdf\xfe\x7d\x8f\xfe\xd7\xfb\xe1\x2e\xbe\xdb\x7e\x65\xe1\xdb\xe3\xee\x29\xbe\xdb\x36\x5d\xde\xbc\xdd\xde\xed\xe7\xf8\xee\xe5\x51\xc4\x65\x55\x64\x57\x76\xfd\xe7\x1d\x83\xd8\x09\xc3\xbf\xdf\xef\xd2\x65\x5e\x37\x6d\xdd\x34\x45\xdd\xbd\xdd\x66\x57\x9f\x36\x17\x03\x53\xff\xc9\x36\xf9\xab\xed\xec\xdd\x56\x1b\x64\x5d\xef\xec\xdf\x4f\xcf\xc6\x1e\xde\x7e\xf5\x74\xe0\xe9\xc3\xff\xff\x74\x60\xed\x48\xae\x68\x2b\x3d\x93\x11\x25\xa3\xba\x6d\x64\x26\x53\xe8\x95\x47\xbc\x55\xbb\xb3\x67\x36\xd8\xa3\x14\xf2\x67\x65\x52\x50\xbd\xb2\x19\x4c\x61\x9d\x8d\x95\xf1\xa4\x34\xac\xfa\x6e\xd4\x85\xe8\x5c\x91\xb4\xea\xc0\x31\x17\x6a\x02\x16\x89\x8a\x14\xa2\xbc\x92\x22\x61\x8c\x4a\x1d\x0f\xd8\xd0\xb2\x61\xe9\x19\xbd\x51\xd7\x1c\x94\x67\xbd\xdf\x43\xed\xb1\x1e\xfb\x5e\x39\xbb\x50\x85\x5a\xd7\x7a\xf4\x0f\xd1\xbe\x48\xf5\xa2\x32\xb9\x67\xea\xab\xf0\xc8\x31\xb6\x11\x3b\xaf\x7b\x44\xa5\xb0\x37\x58\x1e\x16\x43\x5d\x51\x29\xc0\x2c\x9d\xd8\x03\x46\x25\x9b\x51\xcd\x12\xc5\xa5\x32\x5d\x2f\xd6\x5e\xa4\xde\x7b\x75\xef\xd8\x23\x11\x6e\x55\xa7\x14\x83\xdd\x53\xc5\x87\x1a\x46\xe5\x0d\xca\x0e\x85\x32\xf3\xb4\xb8\xba\x9c\xc5\x8c\x59\xee\xd5\xb4\xd9\xa9\x72\x7b\xb0\xc7\x56\x27\x18\x73\xff\x62\x4e\x75\x06\x4c\x39\x45\x55\xd7\xbd\x2b\x1b\x94\x80\x31\xd9\xe2\xd5\x63\x23\xd5\x5a\xac\x1d\xb7\x45\xec\xa4\x4a\xc0\x3a\x62\xb5\x67\xea\x5e\xca\xbc\x55\xb6\x64\x7d\x95\xc6\x36\x05\x5e\xba\xc2\xa0\x62\x9e\x5f\x74\xcd\x60\xe1\x46\x2c\x07\x2b\xf2\x0c\xfb\x37\x2c\xd7\xae\x64\xc1\xb7\x75\xc2\x47\x57\x7e\xd6\x21\x1f\x3c\x0b\xb7\xca\x28\xf3\xda\xf5\x68\xdc\x77\xe0\x14\x06\x64\x9f\x30\xb1\x9d\xb6\x08\xc3\xac\xd7\x58\x55\x5d\x70\x7e\x47\x16\x41\x2d\xb0\x4e\x1b\xa3\x95\x82\x57\x27\xbd\x97\xda\x20\x0e\x2c\x86\xf4\x7c\x9d\x3b\x46\x26\x65\x68\x3b\xcd\x19\x7d\x8d\xe0\x11\xc5\x46\xac\x10\x4b\xb9\x4e\x3d\x72\xd9\x08\x35\x8a\xbf\x6a\x9d\x84\x98\x62\x2e\xa5\x12\xa2\xd4\xae\x30\x67\xd9\xb4\x56\x77\xb2\xf6\xdf\xd8\xba\x47\x9d\xa8\xb5\x9e\x15\x33\x75\xec\xc8\x24\x28\xef\x59\xdd\xbc\x5e\x7b\x8d\x52\xa5\xd6\x59\x96\xc2\x80\x1f\x2c\x0b\xab\xfb\x66\x5d\x5b\x29\xa8\x56\xd9\x99\x39\xa3\x2a\x17\xeb\x46\x46\x29\x95\xe8\xf3\xe0\x23\x3b\x11\xc9\x1c\xaf\x8b\x4e\x15\xc9\xc4\xf8\x7d\x7d\xae\x96\x4a\xc6\xc7\xb3\x3a\x84\x64\x32\xeb\x4c\x67\xbe\xbe\x46\x27\x0f\x8d\xf0\x8b\x2f\x72\x55\xe5\xeb\xe9\xa3\xd9\x70\x54\x77\x43\x9d\x20\x6c\xb1\x28\xae\x3a\x55\x80\x2b\x77\x64\x95\x67\x6b\x32\xfb\x2c\x5e\xea\xd4\x49\xca\xe4\x67\x32\xfc\xa8\x13\x14\xeb\x5c\xd6\x6e\x03\xfc\x48\x66\xb5\x0a\x6e\x71\x55\x63\xa7\x27\xbd\x63\xb0\x57\x17\x8c\x71\x89\xc9\x45\x27\x03\x93\xba\x2b\x36\x77\xe6\xaa\x93\x18\xce\xa4\x18\xd9\x4f\xa5\xaa\x1f\x35\xc9\xba\xcd\xde\x99\xab\x61\x3e\x70\x2f\xf1\x47\x85\x43\x8c\x17\x52\x7f\xe0\x9a\xf5\x9b\xca\xc9\xc4\x83\x83\x73\x01\xfe\xa5\x7a\xb0\x4e\x61\xa7\xaa\x52\x5d\xb8\x6e\xed\x34\xce\x8e\x53\xfc\x50\xe5\xe7\x6a\xcc\xaa\x3e\x9d\x30\x19\x66\x07\x8f\x7d\x30\xb5\xe8\x14\xc0\x3a\x73\xed\xb9\x0b\x81\x32\x01\x7f\xa3\xf0\x47\x65\x0c\x97\x8f\xea\x2e\xb0\xee\x7c\xad\xac\x54\x15\x58\x15\xa6\x93\xd6\x5e\x7c\x53\x35\xe7\x93\x4c\x6c\xd4\xaa\xf2\xc2\x8e\x96\x17\x32\xe7\x97\x5c\xbc\x6c\xa7\xa8\xb3\x63\x91\x0a\xda\xf8\x59\xfc\x0b\xdf\xda\xbe\x0a\x29\x35\x9d\xc2\x94\xea\x56\x75\xca\x07\xac\x93\xf8\xb4\x8a\x51\x8a\x17\x5c\xb2\xce\x46\x1d\x5f\xf2\x22\x15\x58\x3f\xfa\xb5\x52\x5d\xfb\xec\x45\xcc\x14\xaa\x60\xad\x13\x2a\x1f\x33\x16\xbe\x81\xd3\xec\xc4\x4a\xbc\xcc\x33\xad\xec\x09\xdf\x58\x55\xac\xee\x88\xa9\x59\xc5\x0d\x15\x28\xb1\xdb\xad\xaa\x53\x2a\xbf\xd2\x49\x7a\xaf\xd3\x61\x6c\x93\x2b\x8e\x2b\x9d\xde\x51\x89\xa1\x8a\xc9\x81\x95\xb0\x02\x4e\xe1\x2b\x3b\x85\xce\x3d\x7f\x76\xaa\xac\xca\xf5\xd4\x52\x55\x71\xab\x78\x1d\x35\x0f\x7e\x46\xb9\x12\x9f\xfc\xdf\xaa\x6b\xc0\x9e\xaa\xb5\x2a\x97\x7e\xb0\x67\x7a\x57\xfc\xd6\xc5\x6f\x34\x46\xf4\x38\x32\x9e\x56\xb5\xc3\xdc\x4b\xa3\xd3\xf1\xd1\xf1\x6d\xa7\x28\xb3\xfb\x76\xd4\x9c\xc4\xbd\xf1\x4c\xeb\x7e\x85\x47\x88\xa1\x4a\x6f\x14\x80\x35\x72\xc4\xd8\x9f\x35\x86\x61\x4c\x1d\x18\xf8\x18\xbb\x62\x8b\x52\xf1\x4f\xde\xb7\xd3\xcc\x5e\x95\x60\xeb\xb1\xcd\xef\xd7\x5c\x99\xa9\x92\x20\x3e\x89\x01\x2a\x64\xeb\xa4\x36\xbe\x9e\xf5\x19\xf3\x97\x3a\xd7\xc4\x14\xd7\x19\x37\x0a\x73\x85\xba\x6a\x56\x19\xe9\xcd\x03\xf8\xa2\xd7\xc9\xfb\xa2\xf5\x2c\xe2\x45\xbb\xde\x2b\x7e\x1a\xd7\x3b\x56\xf1\xe8\x2d\x00\x72\x2d\xf8\xeb\xd4\x21\x81\xcf\xad\xfa\x51\xdc\x35\xca\x8f\x68\xa1\x49\x1d\xde\x51\x9d\x3b\x72\x02\xf6\x23\xd7\x8c\xea\xd6\x58\x57\x5e\x27\x9c\x51\x9d\x06\x30\x54\xea\x74\x1a\xbc\x80\x8f\x4e\x98\x9c\xa5\xa1\x2c\x87\x56\xea\x28\xf7\xea\x4e\xaa\x6b\x35\x29\x96\x72\xc5\x31\xb6\x2b\xd6\x2e\xd0\xa0\xce\xe4\xa4\xee\xe6\xe0\x36\xc8\xd5\x5d\x2f\x14\x6f\xf0\xbe\x69\x89\x5a\x39\x40\x5d\x3b\xee\x8d\x7a\x53\x00\x8e\x24\x96\xac\xba\x6c\x1d\x57\xe4\x4a\x70\x35\x28\x3f\xb7\x6b\x77\xb1\x92\x26\x2b\x3d\x5f\x11\x2f\xdc\xb7\x6a\x58\x27\xaf\x99\x3a\xcf\xa3\xf8\xc4\x4e\x88\x27\x55\xcf\x3a\x0d\xb0\x2e\x56\xe5\xd8\xaf\x54\xa9\x31\xc7\xa2\xaa\xb2\x15\x2f\x58\xb5\x3e\x38\xe7\x92\xd7\xf0\x47\x54\x0e\x22\x27\x2f\xe2\xa1\x45\x55\x33\xbf\xb7\x5c\x3d\xaa\xeb\xda\xeb\x54\x48\x5d\x61\x78\xc5\x70\x98\x89\x7b\x3b\xdf\xcb\xf3\x1e\x67\x75\x1d\x0a\xff\xed\xac\xdc\x6f\xb6\xab\x7d\xef\xd9\xca\xed\xd2\x11\xe0\x0b\xce\xb2\x8a\x33\xba\x6f\x9b\x55\x3f\x56\xfe\xac\x55\xc6\xbd\xfb\x2f\xaa\xab\x67\xf1\x16\xcf\x6f\x18\x30\x17\x39\x76\x50\x45\x5e\x29\x1f\x10\xef\xd6\xad\x59\xd4\x39\x9c\x9d\x83\x47\x69\xd8\x5c\x6f\x46\x74\xea\xac\x93\x8b\xd7\x37\x50\x96\xda\xf1\x4a\x4c\x2d\xea\xe2\x35\xd2\x25\xab\x5d\x2b\x75\xf3\xc8\xf7\x51\xda\xdb\xaa\xec\xdc\xb9\x3f\x53\x6c\x58\x67\x63\x70\xfe\xcb\x75\x7a\x50\xa9\x53\x81\x2d\xad\xd3\x5c\x38\x46\xc8\xb9\xcb\x7c\x7e\x6b\x2a\x8a\xa3\xa2\x3a\x8b\x76\x62\x20\xee\xea\x74\x7a\x38\xe8\xb4\xd8\xba\x14\xf2\x13\x36\xeb\xf4\xd6\x0c\xbc\x41\x8e\x22\xd6\xec\x4d\x28\x75\x19\x0a\xbd\x61\x52\xcb\x1f\x93\xba\x73\x76\xc2\x1c\xd5\xad\x17\x2f\x35\xd2\xbe\xad\x4e\x19\xe0\xb9\x4e\xd8\xae\xa5\x99\xac\xfe\xc8\x7c\xce\x4e\x5d\xef\x56\xf1\xdd\xaf\xf9\x34\xba\xed\x16\xf1\xc1\xfa\xe6\x43\xa1\x13\x62\xeb\x50\x74\xe2\x21\x75\x01\x0b\xe5\x78\xab\xef\x74\xea\x9e\x2b\xa7\xb3\x06\xeb\x66\xe9\x54\xb1\x50\x37\x0c\x5b\x92\xc7\xc9\x27\x70\x7b\x2b\x5e\x37\x3d\xaf\xf8\x98\xf5\x56\x88\xbd\x4d\xa0\xd3\xd9\x56\xdd\x48\x72\xe0\xa2\xfa\x00\x4e\x28\xda\xb3\x1f\x2a\x69\x85\xba\x3e\x9f\x64\x13\x63\xf0\x70\x27\x6e\xb3\x1c\x32\xab\x93\x3b\x3a\x9e\x1a\x9d\x6c\xac\xdc\xcb\xba\xec\x34\x64\xf4\x3d\x15\xe5\xf9\xa4\x7d\x54\xe7\x7c\xed\x7c\x1b\x3f\x8d\xce\x87\xb5\xf0\x6c\xdd\xa6\xdc\x39\x19\xfd\x19\xc5\x0b\xb3\xde\x14\xb3\xd3\x40\x75\xc3\xe1\x9b\x5e\xfa\x0a\x3e\x2d\xa4\x93\xed\x2d\xb9\x5c\x6f\x77\x8d\xe7\x13\xf2\x51\xff\x0f\x7a\xcb\xcb\xea\xcc\xd2\xf7\xd5\x29\x96\xec\x04\x43\x27\xdf\xd8\x03\xdf\x5b\x07\x50\xcf\x71\x9f\xdc\x47\xcd\x51\xab\xc3\xb7\xe8\xad\x81\x5e\x9d\xcc\x5a\x6f\xff\x3c\x77\xea\x7b\xe1\x50\x27\xdf\xa6\xc3\x5a\x8f\x5b\x6c\x61\xa7\x5c\x95\x4e\x8b\x55\x63\xda\xc9\x84\x62\xcf\xde\xc2\x5b\x4f\x21\xa5\xa5\xe0\x93\xb1\x3b\x77\x49\xad\x6e\x5c\xd4\x69\x2d\xd4\x75\x94\x66\xaf\xd4\x15\x6f\x74\xaa\x80\xfe\x2d\x54\x67\x91\x53\x8d\xcf\xf4\x76\xc5\xa2\xd3\xac\x59\x6f\x3d\xce\xea\x62\x63\xf3\x4e\x27\x47\x76\xda\x21\xcd\x1a\xd5\xf1\xab\xf2\xf3\xa9\x6b\x21\xce\x5a\xf3\xfa\xda\x87\xb0\xfa\x64\xf2\x75\x60\x47\xae\x9b\x66\x50\x77\x38\x0a\xbf\xe4\xfd\x39\x86\xff\x0b\x00\x00\xff\xff\x53\x26\xea\xab\x00\x30\x00\x00")

func resResGoBytes() ([]byte, error) {
	return bindataRead(
		_resResGo,
		"res/res.go",
	)
}

func resResGo() (*asset, error) {
	bytes, err := resResGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/res.go", size: 32768, mode: os.FileMode(420), modTime: time.Unix(1568021328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resDocSampleTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x4f\x73\xda\x46\x18\xc6\xef\xf9\x14\x7b\xe8\x4c\x2e\x15\x46\x4c\xd3\x71\x72\xe8\xa9\x97\xde\x7a\xe8\x91\x0b\x11\xaa\xad\xa9\x82\x18\x69\x31\x76\x4f\x90\xc1\xc6\xc4\xf2\xc0\x18\x6c\x37\x04\xff\xcb\x40\x42\x27\xe5\x4f\xa6\x6e\x20\x92\xb0\x3f\x8c\xb5\xbb\xe2\xe4\xaf\xd0\x59\xad\x2c\x24\x81\x89\xad\x03\x87\x9d\xdd\xe7\xb7\xef\xf3\xbc\xef\xf2\xdd\x4f\x29\xf8\x7b\x4c\xdc\x14\x81\x9a\xcb\x00\x4d\x50\xa5\x2c\xd4\xb8\xb4\xf8\x4a\x49\x42\x81\x8b\xf3\xb1\x97\x29\x08\xdc\x0f\x57\x3e\x3a\x17\x3a\xb6\x1a\xa4\x6d\xe0\xff\xf6\x9c\xc1\x21\x69\x74\xed\xab\xbd\x5b\x4b\x9f\x9e\x9c\xe6\xa5\x4c\x5a\xc9\x6b\xe4\x5f\x93\x98\x67\xce\x60\x64\x4f\xae\x49\xa3\xcb\x24\xb4\x75\xa7\xd4\xc4\xad\x7f\x6e\x0a\xaf\x9f\xcc\x78\x9a\xe8\x09\xdf\xf3\xe1\xf3\xaf\x78\xbf\xcf\x04\x71\xb5\x46\xda\xc6\xad\xa5\x3b\xfd\x2b\x32\xe9\x3b\x83\x9e\xd3\x2d\xdc\x14\x8a\xe4\xc3\xf6\xb4\x58\x67\x7b\x50\x6b\x88\x4e\xe8\xa2\x73\xf9\x01\x55\x47\xe8\x40\x47\x83\x1d\x72\x5e\x44\xd5\xd7\xf8\x70\x48\xd9\x4b\x71\x61\xb6\x5b\x1f\x58\x87\x30\xfb\x62\x65\x45\xcd\x49\x5b\x52\x66\x53\xca\xc4\xa0\xa8\xc1\xd8\x9f\x62\x06\xa6\x94\x58\x46\x84\x20\x95\x83\x0a\x5d\x8b\xf3\x2b\xbf\x26\x34\x2d\x1f\x57\xd3\x81\x0a\x05\x65\x39\xc5\x36\xda\xb6\x71\x80\xac\x2a\x1a\x58\xa8\x6c\xb0\x62\x22\xd6\xa2\xe1\x0e\x2b\x9e\x34\xba\x78\x77\xe4\x5c\xd5\xd1\x76\xc7\xdb\xff\xd9\x44\xa7\x7b\xe8\x40\x27\xd6\x11\xaa\x8e\xc2\xee\x0a\x0a\xe0\xb2\xaa\x92\xce\x09\x10\xf0\x80\x93\x53\x99\xb5\x5c\x6a\x4d\x04\xd9\x2d\xb8\xae\x64\x00\xf0\x24\xdc\x93\xf6\xd8\xe0\x49\xb3\x64\x1b\x1f\x51\xbd\x18\xe1\xb3\x1c\xd9\x29\x66\xfb\xad\xa5\x13\xeb\x6f\xb4\xf3\x96\xcb\x02\x4e\x5e\x40\xa5\xbc\x57\x80\x7f\x06\x38\xd9\xc7\x79\x1f\xa3\x32\xd0\x8c\x7d\x53\x28\xe2\xee\x05\x3a\x39\x9e\x2d\x3d\x23\xcd\x52\xf0\x26\xf3\x18\xcd\x2d\x2b\x0a\x08\x62\x42\xc5\xa1\xce\xb1\x6d\x7e\xc1\x95\x02\xaa\x7d\x5a\x2e\x0c\x1f\x27\xcc\xc4\xd0\xfe\x21\xd3\x5e\xa4\x9a\xcb\x2e\x57\xc5\xef\x2e\xf1\xd1\xf0\xdb\xaa\x34\xa3\xeb\x0b\x5c\x1c\x50\xf9\x27\xe1\xc9\x4d\x4b\x2a\x4f\x7f\x12\x00\x0a\x71\x3e\x96\xdd\x0a\xea\xbb\x93\x4b\xde\xf5\xd1\xe4\x90\xee\x43\x07\x3a\xdd\xc9\x16\xec\xb1\x1b\xb3\xd9\x41\xd5\x37\xde\x51\x7c\x54\xb6\xcd\x2f\xa4\x59\x5a\x54\x0c\x85\x09\x2f\x92\xde\x4b\x01\x52\xb2\x1c\x13\xb4\x39\x18\x5b\xf6\xaa\x70\xad\xf7\xe5\xe8\x14\xbb\xcf\x01\x6a\x75\x67\x42\xf6\xb8\x17\xe6\xc8\xca\x9a\x96\xe4\x9f\x73\xf1\x55\x2e\xb1\x9a\x54\x45\x2d\x27\xc3\x18\xdc\x84\x61\xce\x6c\x9d\x98\x75\x7c\xda\x62\x57\xb7\xc7\x3d\x1a\x79\xfb\xb3\x73\xd9\x59\x18\xf3\xec\xfe\x9c\x96\x93\xa0\x08\xf8\x70\x20\xcc\xb0\xc0\xe3\x42\x15\xe7\xdb\x69\x36\x0a\x5a\x18\xc0\xc1\x94\xf6\x47\x44\xf4\x71\x00\xdb\x34\xd1\x9b\x8b\xa0\x57\x68\x52\xc7\xad\x33\x16\xda\xf7\xc0\xe3\xc2\x48\x2b\x08\xd2\xdd\x1b\x9e\x9c\xef\x03\xda\xc0\xc3\x1d\x26\x38\x2d\xeb\xd3\x93\xf7\xf6\x75\x1f\x37\xbe\xfa\xd1\xb0\xee\xa2\xaf\x4e\x4d\xc7\xbd\x0e\xda\x1d\x06\xaf\x18\xf1\x50\x65\x11\x25\xe2\x77\x21\xfd\xc6\xff\xf8\xc3\x2a\xff\xfc\xae\xc4\x6a\xcd\x36\xda\xde\xa8\xb9\xd9\x2c\x97\x7b\xf9\x58\x39\x7b\xdc\x0b\x26\x6c\x8f\x0d\x62\x19\xd3\xb7\xa3\x88\x23\xb2\xa4\x41\x36\x1d\xb1\x85\x51\xa0\xdd\x63\x3a\xd2\xfe\x70\xf8\xc3\x80\x26\x75\x54\xd9\xf7\x87\x84\x0e\x65\xa5\x80\x5b\x15\xe6\x1f\x6b\xb4\x48\xcb\x6a\x0c\xc4\xdd\x13\x3d\x43\x61\xbd\x8c\xfa\x4d\x67\x34\x40\x57\x25\x36\x7c\xbf\xfc\xec\x85\xbe\xe8\x6f\x92\x93\x7d\xd1\xbc\xa2\xa6\x1f\x2c\x8a\xcf\xcb\xd3\xf7\x7f\x21\x7d\x1b\xd5\x3e\x3d\xa5\x27\x9f\x86\x00\x01\xc2\x86\x24\xe6\xfd\x57\x03\x0a\xf1\x44\xa4\x6b\xf0\x59\x87\xb4\xf6\x82\x04\xff\x81\x5a\x78\xe1\x8d\xe5\x2e\xcc\xcb\x3d\xc4\x85\x8d\xe5\x2e\xdc\x27\xba\xdc\x85\xff\x03\x00\x00\xff\xff\xc4\x88\x2e\x25\xfd\x08\x00\x00")

func resDocSampleTxtBytes() ([]byte, error) {
	return bindataRead(
		_resDocSampleTxt,
		"res/doc/sample.txt",
	)
}

func resDocSampleTxt() (*asset, error) {
	bytes, err := resDocSampleTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/doc/sample.txt", size: 2301, mode: os.FileMode(420), modTime: time.Unix(1567570003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resDocUsageTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xdd\x52\xda\x40\x18\xbd\xf7\x29\xf2\x02\xbc\x47\x5f\xa3\xda\xcc\xe8\x94\xa9\x0c\x3f\xf6\x36\x41\x04\x91\xd8\x38\x12\x8c\xc4\x58\xa5\x43\x30\x3a\x4d\x16\x5b\x6a\x42\x12\xe0\x61\xb2\xdf\xee\xe6\xca\x57\xe8\x6c\xd6\x32\xa9\x32\xd3\x8b\xee\x15\x33\x7c\xdf\x39\x67\xcf\x39\x9b\x5d\xb9\x5c\x91\x24\x49\x2a\xed\x4a\x2f\x87\xdc\x38\xd4\xee\x41\xe8\xc3\xc9\x3d\x5e\x8d\x88\x8a\x52\xa5\xb9\x55\x93\xeb\xf9\xbf\xa5\xda\x9f\x39\xe6\x2f\xe9\xc2\x67\xc8\x63\xae\x92\x2a\x2a\x9d\x1c\x65\x6a\x9f\xfe\x8c\x69\x7c\x03\x67\x1a\xf1\x1c\xd0\x9b\x64\x30\x4d\x95\x26\x35\x5c\x72\x1c\x00\x9a\xc3\xa2\x0f\xdd\x53\x7a\xe5\xc3\x62\x90\xd9\x0a\x9b\xa8\xc4\xee\x42\x7b\x48\xae\x0f\xb3\xe1\x19\xa7\xd9\xd9\x17\xe0\x3b\xbb\xf2\xce\xc7\xfd\x46\x5d\x92\x00\x25\xd0\x89\x8a\xe8\x38\xf4\xa8\xd5\xa2\x86\x8b\x97\xbd\xe7\x44\x83\xe0\x07\x78\x97\x60\xbb\xd4\x6a\xc1\xb4\x4d\xae\x66\xe4\x62\x4a\x6e\x3b\xd9\xb7\x4b\x38\xe7\x3a\xb2\x87\x31\xd1\x75\xb6\xe2\x52\x40\x47\x44\xeb\x80\x6f\xe1\xe8\x0e\xfa\x6a\xaa\xa8\xe0\x98\x38\x7e\x4a\x15\x95\xfc\xea\x31\x34\x80\xd3\x01\x4d\x2e\x40\x0f\xb8\x9a\x46\x45\xa8\x69\x54\x3e\xbc\xaf\xcb\xfc\x17\x8e\xbf\x14\xa5\x08\xb2\xa2\x02\x21\x6b\x23\x13\x71\x47\x70\x6d\xfe\x83\xb2\xda\xf8\x24\x7c\xae\xae\xf3\xe8\xde\xb1\x91\xf6\x16\x57\xd8\x58\x84\x63\x2d\x8b\xd8\xdf\x79\x16\x71\x9f\x7c\xb5\xc9\x45\x07\xc7\x4f\x2c\x40\xb0\x6c\x3d\x27\x1a\x8e\x1d\xd0\x4f\xc4\x30\x9c\x6b\x38\x8e\xe1\x64\x24\x88\xb9\x8b\x63\x0b\x87\x0f\x62\x25\x33\x67\xd4\x70\xe9\x7d\x44\x6e\x93\xcc\x32\x20\x51\xf2\x68\xf6\xa4\x57\x07\xa6\x6d\x41\x89\x43\x0f\xaf\x7c\x62\xcc\xd7\x06\x88\xe2\x70\x5c\x51\x85\xe3\x69\xd1\xb6\x1c\xae\xba\x01\x4e\x2c\xbf\xdc\x58\x5c\x42\x3f\xc3\xd1\xf8\xd5\x3e\x0e\xbd\x1c\x62\x7b\x03\x44\x71\x59\x34\x05\xc6\x8f\x6c\xe6\xac\xfb\x82\x17\x36\x0e\x23\x9a\x44\xd9\x30\xd8\x88\xce\xa1\xcb\x7b\xb5\xbc\xef\xe5\x9a\x54\x2a\x17\x9e\x85\x48\x4c\x60\xc1\xb1\xc9\x46\xee\xdb\x48\x78\xeb\x72\x1f\x39\x77\x3e\xc3\x59\xe7\xbd\xcd\xb6\x1e\xec\xc9\x9f\xf3\xc0\x0f\xfe\x7e\x80\x45\x26\x86\x26\xe4\xf0\xe8\x7f\x99\xb6\x4a\xa5\x03\xb9\xba\xbd\x5f\x93\xd7\x7e\x91\xcb\x25\x1d\x47\x0c\x4d\x68\xdc\x26\xa6\x03\x2b\x93\x47\x36\x69\xbe\xab\xd7\x2b\x0c\x05\xe4\xb1\xc9\xfb\xd5\x3f\x85\xc8\x48\x15\x35\x33\x86\x0c\x21\xea\x75\xd7\x9f\x85\xdf\x01\x00\x00\xff\xff\x34\xb9\x3e\xee\x3e\x04\x00\x00")

func resDocUsageTxtBytes() ([]byte, error) {
	return bindataRead(
		_resDocUsageTxt,
		"res/doc/usage.txt",
	)
}

func resDocUsageTxt() (*asset, error) {
	bytes, err := resDocUsageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/doc/usage.txt", size: 1086, mode: os.FileMode(420), modTime: time.Unix(1567564149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resJsonCaseFromProdoctJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x4d\x8f\xd2\x40\x18\xc7\xef\x7c\x8a\xc9\x9c\x7b\x68\xbb\x7b\xda\xab\x07\xaf\xde\x8d\x07\xd2\x1d\x63\xe3\xba\x90\x6d\x37\x31\xd9\xf4\xd0\xc4\x45\xb3\xbb\x04\x12\x5e\x12\x88\x82\x55\x8a\x04\x5b\xaa\x11\x5f\x42\x15\xbf\x0c\xf3\xd2\x93\x5f\xc1\x74\x8a\xa5\x2d\xd4\xe2\xc1\xbd\xc0\x4c\x9f\x67\xfe\xfd\x3d\xff\x79\xfa\x5c\x94\x00\x80\x4a\xe5\x18\xc1\x23\x20\x09\xe1\xe6\xb4\xfc\x24\xdc\x40\x3a\xbe\x0c\xcc\x16\x7b\x3e\xc5\x57\x13\x7c\xd3\x25\x9f\xaf\x99\xd7\x21\x56\x8d\x0c\xbe\xac\x16\xef\x70\xcb\x84\x3c\x5d\x29\x6b\x48\x83\x47\xe0\x7e\x09\x00\x00\x2e\xf8\x2f\x00\x50\x3d\x0e\x05\x45\x51\xf8\xf3\x40\x57\xf5\x13\xae\x1b\x09\xd1\xf6\x64\xb5\xbc\x16\x25\x18\x27\x68\x3a\xaa\x6e\x84\x92\x62\x29\xc1\x58\x31\xa3\xea\xda\xc1\x74\x24\x4a\x30\x8e\x1a\xeb\xd5\x03\xfe\x6f\x08\x3b\xf8\xe4\x5d\x7c\xb4\xe7\xe3\x1f\x1d\x3c\xfa\xc8\xe6\x36\x9b\x8f\x71\xe3\x6b\xd0\x36\xf1\xac\x4f\xdd\x2e\xed\xd8\xff\xc6\x2b\xe7\xf2\xb2\x9f\x03\xea\xbb\x6c\xd9\xc2\x97\xf6\x01\x71\xac\xa0\xdd\x63\x9e\x47\xfb\xcf\xb0\x57\xa3\xaf\xcd\x44\x19\xc2\x5f\xf5\xa5\x1c\x7d\xea\x38\x87\xc4\xb1\xf0\x87\x57\xa1\xd9\xbc\x24\x98\xca\x44\x4f\xab\x48\xd1\x79\xea\x27\x9f\xfa\x43\xd2\x68\xd2\xd1\x22\x2a\x98\xbd\x79\x1f\xd5\x9c\x3e\xa2\x6a\x77\x1e\x21\xe5\xf1\xbd\x8a\x7a\x1a\x1e\xd4\xcf\xce\xd1\x9e\x98\x52\x9e\x0d\xab\x6f\xf5\x22\x27\x32\x08\x77\xcf\x2a\xe7\xd5\xf5\xdb\x53\xa1\xed\xfb\xc8\xc2\xa4\x80\x24\x21\x1b\xd9\xdc\x0d\x67\x91\x0b\x58\x32\x3c\x0f\xcb\x27\x1a\x4a\x85\x0d\x61\x3f\x12\xb9\x88\x44\x22\x8e\x45\xdc\xb7\xd4\x9a\xfd\x67\x92\x83\x7c\x12\x5c\xab\x6f\x60\x6e\xc5\x96\xc3\x3d\x61\x0a\x9d\x49\x74\x3a\xff\x0e\xc8\x8b\x26\xbe\x1a\xfe\xfa\x7e\x13\x35\x3b\x79\x39\xdd\xdd\xef\xa0\xa8\xe7\x41\x62\xca\x80\x78\xd2\x80\xed\xd9\x53\x0a\x57\xc6\xef\x00\x00\x00\xff\xff\xac\x35\x04\x4d\x6b\x05\x00\x00")

func resJsonCaseFromProdoctJsonBytes() ([]byte, error) {
	return bindataRead(
		_resJsonCaseFromProdoctJson,
		"res/json/case-from-prodoct.json",
	)
}

func resJsonCaseFromProdoctJson() (*asset, error) {
	bytes, err := resJsonCaseFromProdoctJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/json/case-from-prodoct.json", size: 1387, mode: os.FileMode(420), modTime: time.Unix(1564469536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resJsonSuccessJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\xce\x4f\x49\x55\xb2\x52\x30\xe4\xaa\x05\x04\x00\x00\xff\xff\xb8\xfe\xe3\x6c\x0f\x00\x00\x00")

func resJsonSuccessJsonBytes() ([]byte, error) {
	return bindataRead(
		_resJsonSuccessJson,
		"res/json/success.json",
	)
}

func resJsonSuccessJson() (*asset, error) {
	bytes, err := resJsonSuccessJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/json/success.json", size: 15, mode: os.FileMode(420), modTime: time.Unix(1564618548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resJsonZentaoSettingsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x3d\x6b\xc3\x30\x10\x40\xf7\xfc\x8a\xe3\x66\x0f\xe9\xe7\xe0\xad\xa4\x8b\x97\x52\x48\xb7\xd2\x41\xd8\xe7\x70\x60\x4b\x41\x3a\x77\x68\xc9\x7f\x2f\x52\x02\x2d\xf1\x99\x56\x4b\x21\xa0\x29\xf1\x3d\xd9\x0f\x73\x0f\x7f\xae\x00\xb0\x75\x1d\x61\x0d\x57\x55\xbc\xf8\x20\x2b\xc6\x6d\x49\x84\xed\x2e\x60\x0d\xf1\x08\x00\x8e\xae\x9b\x06\x8a\x83\xd7\x34\x80\x13\x48\xb0\xe9\xe2\xfd\xeb\x75\xf5\x3d\xda\x1c\x1f\x8a\xa6\x1b\xd9\xe2\x0f\xf0\x64\xc6\x04\x1e\xce\x41\x13\x1e\xa9\x37\xd3\x20\x58\x43\x6f\x86\x40\x27\x74\xa8\x16\x84\xd7\xaa\xb0\x1d\x98\xac\x68\xc6\xcd\x8c\x64\x2b\x6f\x54\x25\x5b\x21\xdf\x9b\x96\x34\x6b\xa3\xc1\x6c\xf1\xad\x2a\x0e\x2c\xaa\x73\x7b\x36\xcf\xd6\xdd\xe9\xbb\xdc\xb3\xba\xc9\xe7\x66\x49\x26\x7e\xfa\xd5\x75\xaf\xba\x84\x42\x2c\x50\xf3\xbd\xcc\xd1\xe2\x0b\xa6\xdf\xb7\xe3\x49\x6c\x8d\xd0\xce\x79\x2e\x19\x97\x8c\xb3\x32\xfe\x93\xec\xff\x3a\x7e\x27\x1f\xd8\xd9\x52\x71\xa9\x78\xbe\xc9\x8b\xa9\x78\xef\xd9\x79\x96\xf2\x35\x2e\x1d\x5f\x66\xc7\xab\xf8\xef\xf0\x15\x00\x00\xff\xff\x54\x3e\xa5\x1c\x43\x0b\x00\x00")

func resJsonZentaoSettingsJsonBytes() ([]byte, error) {
	return bindataRead(
		_resJsonZentaoSettingsJson,
		"res/json/zentao-settings.json",
	)
}

func resJsonZentaoSettingsJson() (*asset, error) {
	bytes, err := resJsonZentaoSettingsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/json/zentao-settings.json", size: 2883, mode: os.FileMode(420), modTime: time.Unix(1565055118, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplateBatTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\xca\xc2\x30\x10\x04\xe0\xfb\x3c\x45\x2e\x7d\x89\xfc\x39\xfc\xd0\x93\x67\xfb\x02\x6b\x32\xd5\x42\xc8\x86\xee\x0a\xf5\xed\x25\x88\x8a\x7b\xdb\x8f\x19\xe6\xaa\xae\xc1\x5c\x76\x47\x4a\x69\x99\x81\x2c\xc6\x53\x89\xe1\x7d\x93\xa1\xef\x5a\xee\xd9\x3f\x3a\x19\x7c\xf3\xca\x6f\x68\x90\x39\xbb\xfd\x12\x78\x74\x66\xb7\x88\xf1\x2c\xf3\x1f\xe2\x6b\x0b\xf8\x67\xbe\x69\xd0\x75\xc5\x99\x5e\x35\x4b\x0d\x6c\x72\xa9\x2c\xac\xf2\x60\xe1\xd1\xa5\xd9\xa6\x0d\xa3\xfb\x0c\x00\x00\xff\xff\x45\x37\x84\x55\xa7\x00\x00\x00")

func resTemplateBatTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplateBatTpl,
		"res/template/bat.tpl",
	)
}

func resTemplateBatTpl() (*asset, error) {
	bytes, err := resTemplateBatTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/bat.tpl", size: 167, mode: os.FileMode(493), modTime: time.Unix(1567068806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplateGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xb1\xca\xc2\x40\x10\x04\xe0\xfa\x9f\xa7\xd8\x22\x81\xdf\x34\x6b\x9d\x04\x14\x52\xd9\xe7\x05\xce\xcb\x1a\x0e\xf5\x72\x64\xf7\x24\x20\xbe\xbb\x44\x50\x71\xba\xf9\x18\x18\x66\xce\x3a\xf3\x31\x44\x96\x78\xa3\x71\xa2\x39\x47\x2a\xb6\x54\xec\x1b\x92\x25\x18\x15\x3b\x20\x39\x7f\x76\xa3\xd0\xd5\x85\x08\xae\xd0\xb6\x6d\xdf\x01\xde\xa9\x1c\x86\x9a\xde\x29\x15\x69\x9e\x86\xec\xed\xa3\xa5\xc2\x82\x5d\xe4\x3b\x5a\x49\x4d\x92\xfe\x12\x64\x49\xe2\x4d\x6b\xac\xa5\xef\x1a\x54\x0c\x9c\x72\xf4\xaf\xd7\xff\x0d\xdd\xf1\x57\x2a\x1e\xcf\x00\x00\x00\xff\xff\x80\xb4\xa9\x41\xb2\x00\x00\x00")

func resTemplateGoTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplateGoTpl,
		"res/template/go.tpl",
	)
}

func resTemplateGoTpl() (*asset, error) {
	bytes, err := resTemplateGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/go.tpl", size: 178, mode: os.FileMode(493), modTime: time.Unix(1567068806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplateLuaTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\xc8\x29\x4d\xe4\xd2\xd5\x8d\x8e\xe6\xb2\xb1\xb1\x09\x71\xe6\xe2\x4a\x4e\x2c\x4e\xf5\x4c\xb1\x52\x80\x01\xd5\x62\xae\x82\xa2\xfc\x94\xd2\xe4\x12\xb8\xa8\x6a\x31\x57\x49\x66\x49\x4e\x2a\x42\x11\x48\xa8\xb8\x24\xb5\xa0\x18\x55\x88\x2b\xb5\xa2\x20\x35\xb9\xa4\xd8\x8a\x0b\xc4\x09\x71\xb6\xe6\x8a\x8d\xe5\x02\xb1\x01\x01\x00\x00\xff\xff\x35\xca\xae\x94\x84\x00\x00\x00")

func resTemplateLuaTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplateLuaTpl,
		"res/template/lua.tpl",
	)
}

func resTemplateLuaTpl() (*asset, error) {
	bytes, err := resTemplateLuaTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/lua.tpl", size: 132, mode: os.FileMode(493), modTime: time.Unix(1567068806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplatePerlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0e\x02\x21\x10\x85\xe1\xfe\x9d\x62\x8d\xd9\x9a\x7e\x85\x8a\xca\x9e\x0b\xe8\x30\x05\x09\x81\x09\x33\x18\x8f\x6f\x28\xd4\xec\xeb\xfe\x2f\xef\x7a\x71\x53\x87\x7b\x96\xe6\xb8\xbd\x36\xe1\x51\x11\xa4\x67\x78\xef\x53\x04\xe8\xa1\x7c\xcf\xc7\xf6\xdd\xae\x90\xd1\xf3\x24\xfb\xe9\xae\xb0\x62\x95\xff\xa7\x45\x6a\x2c\x7a\x26\xf0\x5b\x98\x4c\x0f\xac\x48\xf1\x86\x40\xd3\xb0\xea\x13\x00\x00\xff\xff\x74\x17\x91\x72\x87\x00\x00\x00")

func resTemplatePerlTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplatePerlTpl,
		"res/template/perl.tpl",
	)
}

func resTemplatePerlTpl() (*asset, error) {
	bytes, err := resTemplatePerlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/perl.tpl", size: 135, mode: os.FileMode(493), modTime: time.Unix(1567068806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplatePhpTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x28\xc8\x28\xe0\xe2\xb2\xb1\x07\x51\xfa\x5a\x5c\x36\x36\x36\x21\xce\x5c\x5c\xc9\x89\xc5\xa9\x9e\x29\x56\x0a\x30\xa0\x5a\xcc\x55\x50\x94\x9f\x52\x9a\x5c\x02\x17\x55\x2d\xe6\x2a\xc9\x2c\xc9\x49\x45\x28\x02\x09\x15\x97\xa4\x16\x14\xa3\x0a\x71\xa5\x56\x14\xa4\x26\x97\x14\x5b\x71\x81\x38\x21\xce\xd6\x5c\x5a\xfa\x5c\x60\xb6\xbd\x1d\x17\x20\x00\x00\xff\xff\x3c\x3f\x6d\x83\x8d\x00\x00\x00")

func resTemplatePhpTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplatePhpTpl,
		"res/template/php.tpl",
	)
}

func resTemplatePhpTpl() (*asset, error) {
	bytes, err := resTemplatePhpTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/php.tpl", size: 141, mode: os.FileMode(493), modTime: time.Unix(1567068806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplatePythonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x28\xa8\x2c\xc9\xc8\xcf\x33\xe6\x52\x57\x57\xe7\xb2\xb1\xb1\x09\x71\xe6\xe2\x4a\x4e\x2c\x4e\xf5\x4c\xb1\x52\x80\x01\xd5\x62\xae\x82\xa2\xfc\x94\xd2\xe4\x12\xb8\xa8\x6a\x31\x57\x49\x66\x49\x4e\x2a\x42\x11\x48\xa8\xb8\x24\xb5\xa0\x18\x55\x88\x2b\xb5\xa2\x20\x35\xb9\xa4\xd8\x8a\x0b\xc4\x09\x71\xb6\x06\x5b\x04\xe2\x00\x02\x00\x00\xff\xff\x4c\x98\x0a\x85\x88\x00\x00\x00")

func resTemplatePythonTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplatePythonTpl,
		"res/template/python.tpl",
	)
}

func resTemplatePythonTpl() (*asset, error) {
	bytes, err := resTemplatePythonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/python.tpl", size: 136, mode: os.FileMode(493), modTime: time.Unix(1567068806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplateReadmeEnTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\xbd\x6e\xc4\x20\x10\xc4\xf1\xde\x4f\xb1\x52\x0a\x2a\x42\x9f\x36\x49\x1d\x77\xa9\x31\xb7\x36\x2b\x61\x16\xb1\x63\xdd\xc7\xd3\x9f\x38\x5f\x3f\xbf\xff\x78\x9a\xbb\x54\x90\xfb\x70\x24\x95\xc0\x06\x2a\xba\x11\x94\xf6\x88\x94\xe9\x68\x74\x15\x64\x42\x66\xd2\xca\x36\x56\x7c\x6b\x9c\x60\x64\x9c\x20\x5a\x27\x4f\xff\x5d\xc0\xa7\xb6\xd4\xa5\xc1\x46\xa1\x73\x2b\x31\xf1\xcb\x16\x19\x78\xe1\x4d\xea\x19\x74\xdf\x7f\x3f\xbf\x6e\xf2\x34\x17\xa3\xce\x2b\xf7\x41\x32\xd0\xec\x2b\x84\x4d\x90\x8f\xe5\x33\xe9\x1e\x38\xda\xdd\x74\x45\x78\x70\x45\xd4\x88\x35\xbc\x3f\xfc\x85\x77\x7d\x06\x00\x00\xff\xff\xe7\x3c\x70\x0d\xc2\x00\x00\x00")

func resTemplateReadmeEnTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplateReadmeEnTpl,
		"res/template/readme-en.tpl",
	)
}

func resTemplateReadmeEnTpl() (*asset, error) {
	bytes, err := resTemplateReadmeEnTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/readme-en.tpl", size: 194, mode: os.FileMode(420), modTime: time.Unix(1566896184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplateReadmeZhTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\xbf\x4a\xc3\x40\x18\x00\xf0\xbd\x4f\x11\x70\x8e\xb7\xbb\xaa\xb3\xcf\x10\xe3\xd5\x76\xa8\x09\xde\x27\xa8\x53\x12\x23\xc1\x1a\x29\x68\xa1\x10\x23\xc4\x7f\x10\xd4\xd0\xa1\x85\xa6\x46\xbc\x97\xb9\xef\xbb\xbb\xc9\x57\x70\xed\x03\xfc\x5c\x87\x66\xef\x28\x67\xaa\x6d\x74\x91\xda\x8f\xdc\xcc\x63\x9d\xac\xff\x7e\x72\x94\xd7\xf6\xb9\xc3\xfb\x9c\x9f\x87\xdc\x07\xa1\x3f\x2b\x33\x4e\x54\xdb\x6c\xe1\x64\x45\x55\x46\x8b\x7a\x53\xd8\x32\x52\xf2\x89\xf2\x58\xb5\x91\xc9\x96\x38\x5f\xe3\xf7\xb4\xe7\x3a\x26\x2d\xa8\xfc\x52\x6d\xb3\x7b\xb0\xb7\x4f\x37\x0f\xf8\xb6\xd4\x45\x4a\x8b\xda\x66\x63\x5b\x46\x7a\x5a\xab\xee\x55\x57\x31\x3d\x4a\xba\x7b\xe9\xb9\x0e\x4e\x12\x13\x5d\x51\xb5\x52\xbf\xb7\x03\x80\x50\xec\x30\x76\x3c\x84\xc1\xd9\xe1\xb6\x1f\x8c\x18\xf7\xc4\x85\x08\xfa\xc0\x2e\xf9\x09\x78\x81\x07\x7d\x26\xfc\xd3\x61\x08\xc2\x3d\xe2\xa3\xe0\x3f\x00\x00\xff\xff\x59\xcf\x6c\xfe\xd0\x00\x00\x00")

func resTemplateReadmeZhTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplateReadmeZhTpl,
		"res/template/readme-zh.tpl",
	)
}

func resTemplateReadmeZhTpl() (*asset, error) {
	bytes, err := resTemplateReadmeZhTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/readme-zh.tpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1566896192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplateRubyTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0e\x02\x21\x14\x84\xe1\x7e\x4e\xb1\xc6\x6c\x4d\xbf\xb2\x15\x95\x3d\x17\x10\x98\x18\x12\xf3\x24\xbc\x87\xd1\xdb\x1b\x0a\x35\x4e\xf7\x7f\x99\xe3\xc1\x0d\xed\x2e\x55\x71\x94\xc7\xd2\x47\x7a\x61\x4f\xbc\x56\x81\xf7\x3e\x06\x20\x5f\x94\xe7\xb2\x2d\x9f\xad\x8a\xd6\xef\x65\x64\xfb\xea\xaa\xb0\x6a\x37\xfe\x4e\x93\xd4\xd8\xf4\x9f\xc0\x67\x63\x36\xdd\x30\x23\x86\x13\x76\x4a\xc1\xac\x77\x00\x00\x00\xff\xff\x38\xb1\x70\x5a\x89\x00\x00\x00")

func resTemplateRubyTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplateRubyTpl,
		"res/template/ruby.tpl",
	)
}

func resTemplateRubyTpl() (*asset, error) {
	bytes, err := resTemplateRubyTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/ruby.tpl", size: 137, mode: os.FileMode(493), modTime: time.Unix(1567068806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplateShellTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\xb2\xb2\xb1\x51\xe4\xb2\xb1\xb1\x09\x71\xe6\xe2\x4a\x4e\x2c\x4e\xf5\x4c\xb1\x52\x80\x01\xd5\x62\xae\x82\xa2\xfc\x94\xd2\xe4\x12\xb8\xa8\x6a\x31\x57\x49\x66\x49\x4e\x2a\x42\x11\x48\xa8\xb8\x24\xb5\xa0\x18\x55\x88\x2b\xb5\xa2\x20\x35\xb9\xa4\xd8\x8a\x0b\xc4\x09\x71\xb6\xe6\x52\xe4\x02\x31\x01\x01\x00\x00\xff\xff\x8c\x8b\x20\xbd\x84\x00\x00\x00")

func resTemplateShellTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplateShellTpl,
		"res/template/shell.tpl",
	)
}

func resTemplateShellTpl() (*asset, error) {
	bytes, err := resTemplateShellTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/shell.tpl", size: 132, mode: os.FileMode(493), modTime: time.Unix(1567068806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resTemplateTclTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x28\x49\xce\x29\xce\xe0\x2a\x4e\x2d\x51\x48\x4e\x2c\x4e\x55\xa8\xe6\xb2\xb1\xb1\x09\x71\xe6\xe2\x02\xf1\x3c\x53\xac\x14\x60\x40\xb5\x98\xab\xa0\x28\x3f\xa5\x34\xb9\x04\x2e\xaa\x5a\xcc\x55\x92\x59\x92\x93\x8a\x50\x04\x12\x2a\x2e\x49\x2d\x28\x46\x15\xe2\x4a\xad\x28\x48\x4d\x2e\x29\xb6\xe2\x02\x71\x42\x9c\xad\xb9\x6a\xb9\x40\x4c\x40\x00\x00\x00\xff\xff\x23\x82\x1e\x45\x8b\x00\x00\x00")

func resTemplateTclTplBytes() ([]byte, error) {
	return bindataRead(
		_resTemplateTclTpl,
		"res/template/tcl.tpl",
	)
}

func resTemplateTclTpl() (*asset, error) {
	bytes, err := resTemplateTclTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/template/tcl.tpl", size: 139, mode: os.FileMode(493), modTime: time.Unix(1567068813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/messages_en.json":            resMessages_enJson,
	"res/messages_zh.json":            resMessages_zhJson,
	"res/res.go":                      resResGo,
	"res/doc/sample.txt":              resDocSampleTxt,
	"res/doc/usage.txt":               resDocUsageTxt,
	"res/json/case-from-prodoct.json": resJsonCaseFromProdoctJson,
	"res/json/success.json":           resJsonSuccessJson,
	"res/json/zentao-settings.json":   resJsonZentaoSettingsJson,
	"res/template/bat.tpl":            resTemplateBatTpl,
	"res/template/go.tpl":             resTemplateGoTpl,
	"res/template/lua.tpl":            resTemplateLuaTpl,
	"res/template/perl.tpl":           resTemplatePerlTpl,
	"res/template/php.tpl":            resTemplatePhpTpl,
	"res/template/python.tpl":         resTemplatePythonTpl,
	"res/template/readme-en.tpl":      resTemplateReadmeEnTpl,
	"res/template/readme-zh.tpl":      resTemplateReadmeZhTpl,
	"res/template/ruby.tpl":           resTemplateRubyTpl,
	"res/template/shell.tpl":          resTemplateShellTpl,
	"res/template/tcl.tpl":            resTemplateTclTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"doc": &bintree{nil, map[string]*bintree{
			"sample.txt": &bintree{resDocSampleTxt, map[string]*bintree{}},
			"usage.txt":  &bintree{resDocUsageTxt, map[string]*bintree{}},
		}},
		"json": &bintree{nil, map[string]*bintree{
			"case-from-prodoct.json": &bintree{resJsonCaseFromProdoctJson, map[string]*bintree{}},
			"success.json":           &bintree{resJsonSuccessJson, map[string]*bintree{}},
			"zentao-settings.json":   &bintree{resJsonZentaoSettingsJson, map[string]*bintree{}},
		}},
		"messages_en.json": &bintree{resMessages_enJson, map[string]*bintree{}},
		"messages_zh.json": &bintree{resMessages_zhJson, map[string]*bintree{}},
		"res.go":           &bintree{resResGo, map[string]*bintree{}},
		"template": &bintree{nil, map[string]*bintree{
			"bat.tpl":       &bintree{resTemplateBatTpl, map[string]*bintree{}},
			"go.tpl":        &bintree{resTemplateGoTpl, map[string]*bintree{}},
			"lua.tpl":       &bintree{resTemplateLuaTpl, map[string]*bintree{}},
			"perl.tpl":      &bintree{resTemplatePerlTpl, map[string]*bintree{}},
			"php.tpl":       &bintree{resTemplatePhpTpl, map[string]*bintree{}},
			"python.tpl":    &bintree{resTemplatePythonTpl, map[string]*bintree{}},
			"readme-en.tpl": &bintree{resTemplateReadmeEnTpl, map[string]*bintree{}},
			"readme-zh.tpl": &bintree{resTemplateReadmeZhTpl, map[string]*bintree{}},
			"ruby.tpl":      &bintree{resTemplateRubyTpl, map[string]*bintree{}},
			"shell.tpl":     &bintree{resTemplateShellTpl, map[string]*bintree{}},
			"tcl.tpl":       &bintree{resTemplateTclTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
